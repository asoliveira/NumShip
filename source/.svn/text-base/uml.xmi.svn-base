<?xml version="1.0" encoding="UTF-8"?>
<XMI verified="false" xmi.version="1.2" timestamp="2010-11-29T08:35:39" xmlns:UML="http://schema.omg.org/spec/UML/1.3">
 <XMI.header>
  <XMI.documentation>
   <XMI.exporter>umbrello uml modeller http://uml.sf.net</XMI.exporter>
   <XMI.exporterVersion>1.5.8</XMI.exporterVersion>
   <XMI.exporterEncoding>UnicodeUTF8</XMI.exporterEncoding>
  </XMI.documentation>
  <XMI.metamodel xmi.version="1.3" href="UML.xml" xmi.name="UML"/>
 </XMI.header>
 <XMI.content>
  <UML:Model isSpecification="false" isAbstract="false" isLeaf="false" xmi.id="m1" isRoot="false" name="UML Model">
   <UML:Namespace.ownedElement>
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="folder" name="folder"/>
    <UML:Stereotype visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="datatype" name="datatype"/>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Logical View" name="Logical View">
     <UML:Namespace.ownedElement>
      <UML:Package stereotype="folder" visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Datatypes" name="Datatypes">
       <UML:Namespace.ownedElement>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="CO5PVOOuQgbf" name="array"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="P9htSrcCTIZF" name="bool"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="An3dx0U9MZWs" name="tuple"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vukMYJ1xTgqt" name="float"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="WQ5zgcDrQGUN" name="int"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="GwUdTyTNtBjR" name="long"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ViPwMDpsesqK" name="dict"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="U19uHbFWXh7z" name="object"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gaMZl3yElLA5" name="set"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ZzyBrmTKndE2" name="string"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="G5K0PjaxfQ3k" name="undef">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="K2dBzQskmCsd"/>
          <UML:Generalization xmi.idref="V04oODvy4Ye4"/>
          <UML:Generalization xmi.idref="i0j2x4zXdsgJ"/>
          <UML:Generalization xmi.idref="TCDi290HHdx9"/>
          <UML:Generalization xmi.idref="5CL1BmQ1OkQY"/>
          <UML:Generalization xmi.idref="hccQo0zZDNMi"/>
          <UML:Generalization xmi.idref="J0wyovZdwLM6"/>
          <UML:Generalization xmi.idref="DsLPpcbREDb5"/>
          <UML:Generalization xmi.idref="ihZQQp6esB8u"/>
          <UML:Generalization xmi.idref="98XIcXJ1qhiU"/>
          <UML:Generalization xmi.idref="SBVSYDySD9aR"/>
          <UML:Generalization xmi.idref="ZEs6R5Ec5KAx"/>
          <UML:Generalization xmi.idref="vp9EoUPUao9m"/>
          <UML:Generalization xmi.idref="63TzH9xEZgMq"/>
          <UML:Generalization xmi.idref="0ZR7mzHGNs0Y"/>
          <UML:Generalization xmi.idref="oW6V245TrZGu"/>
          <UML:Generalization xmi.idref="QucvN2P4lL7G"/>
          <UML:Generalization xmi.idref="fKSWxKcVAPQF"/>
          <UML:Generalization xmi.idref="GYhXd8rZ3ugv"/>
          <UML:Generalization xmi.idref="a3lWt49LnTlt"/>
          <UML:Generalization xmi.idref="D7fTJM57H65J"/>
          <UML:Generalization xmi.idref="XxupNvHCZeyH"/>
          <UML:Generalization xmi.idref="x1XhenZTFwf6"/>
         </UML:GeneralizableElement.generalization>
        </UML:DataType>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="AOHWLqUH7XLt" name="ascii"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vlu20Q01RmXa" name="bigint"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="v9rmRUupjQBZ" name="bit"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="sSgOna5gJxiJ" name="binary"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="LhJmRqKNzC7Q" name="blob"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="e2GOSPvJpaha" name="char"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="8kGRhxj2e2m3" name="charset"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="q6QnGYCvYQH0" name="date"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="pCHcmyCsiQKN" name="datetime"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="L1Nx191rERcU" name="decimal"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="xoNVEcU3pldZ" name="double"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ipSOEkmZl9Xk" name="enum"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="HYZVxBxt0JOC" name="integer"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vqEiarIIhiet" name="longblob"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="QQS9YxtpVQIR" name="longtext"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="bDKZWgmQX087" name="mediumblob"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="rONW61PUQqdy" name="mediumint"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="nUlHu1iWE03l" name="mediumtext"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gpBBnHGdgd7k" name="varbinary"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="dVF3Lsz6LkNF" name="varchar"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="l3jx3nikartM" name="serial"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="9Aznn4XOZkRs" name="smallint"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="bOzw6KBpOvnR" name="timestamp"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="iT9GJ3cQDbDy" name="time"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="eiNDTm42B3yF" name="tinyblob"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="L75j2s9iLIze" name="tinyint"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="JZ4U9FTnyo0P" name="tinytext"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Y2Rh3PxPW28X" name="text"/>
        <UML:DataType stereotype="datatype" visibility="public" isSpecification="false" namespace="Datatypes" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="uHFDYCsrkuMt" name="unicode"/>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="K2dBzQskmCsd" parent="U19uHbFWXh7z" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="V04oODvy4Ye4" parent="U19uHbFWXh7z" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="i0j2x4zXdsgJ" parent="U19uHbFWXh7z" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="TCDi290HHdx9" parent="U19uHbFWXh7z" name=""/>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="DmhAbRb96G6Q" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="nUPH9I9Mhlot" type="G5K0PjaxfQ3k" name="" aggregation="composite"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="cmgMuet7ObGz" type="G5K0PjaxfQ3k" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="p683CWqfu8mC" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="H6s0ulceRwY3" type="G5K0PjaxfQ3k" name="" aggregation="composite"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="qeRPsOPhUVkh" type="G5K0PjaxfQ3k" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="ePJHTLAfH2hu" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="VQyuf45WafFW" type="G5K0PjaxfQ3k" name="" aggregation="composite"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="cdu4jyTNLmep" type="G5K0PjaxfQ3k" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="BADFFjpuwJWX" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="CYGA2bToEIu1" type="G5K0PjaxfQ3k" name="" aggregation="none"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="lEovT7VeHgrV" type="G5K0PjaxfQ3k" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="5CL1BmQ1OkQY" parent="G5K0PjaxfQ3k" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="hccQo0zZDNMi" parent="G5K0PjaxfQ3k" name=""/>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="OIc2toxc5t0x" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="false" isSpecification="false" xmi.id="FmR4AixsHDaV" type="G5K0PjaxfQ3k" name="" aggregation="none"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="oSRwqijCyJFp" type="G5K0PjaxfQ3k" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="8YJUAeIFk9d2" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="PCLmhsENoXLP" type="G5K0PjaxfQ3k" name="" aggregation="composite"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="7ngNpuWvQoNa" type="G5K0PjaxfQ3k" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="J0wyovZdwLM6" parent="G5K0PjaxfQ3k" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="DsLPpcbREDb5" parent="G5K0PjaxfQ3k" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="ihZQQp6esB8u" parent="U19uHbFWXh7z" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="98XIcXJ1qhiU" parent="G5K0PjaxfQ3k" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="SBVSYDySD9aR" parent="G5K0PjaxfQ3k" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="ZEs6R5Ec5KAx" parent="G5K0PjaxfQ3k" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="vp9EoUPUao9m" parent="G5K0PjaxfQ3k" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="63TzH9xEZgMq" parent="G5K0PjaxfQ3k" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="0ZR7mzHGNs0Y" parent="G5K0PjaxfQ3k" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="oW6V245TrZGu" parent="G5K0PjaxfQ3k" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="QucvN2P4lL7G" parent="U19uHbFWXh7z" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="fKSWxKcVAPQF" parent="G5K0PjaxfQ3k" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="GYhXd8rZ3ugv" parent="U19uHbFWXh7z" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="a3lWt49LnTlt" parent="G5K0PjaxfQ3k" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="D7fTJM57H65J" parent="G5K0PjaxfQ3k" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="XxupNvHCZeyH" parent="G5K0PjaxfQ3k" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="G5K0PjaxfQ3k" xmi.id="x1XhenZTFwf6" parent="G5K0PjaxfQ3k" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="e5fSDUc9L38r" xmi.id="HUhZI1mI3I8g" parent="jAOiOGcdYgPt" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="XoNupsggP9nc" xmi.id="mWSQ60JfsnvE" parent="U19uHbFWXh7z" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="92QPIIFZZkxp" xmi.id="AA682SbgJmn5" parent="8ixpBvWruzFM" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="LexWqMoMvTKm" xmi.id="ZnOiRxf0eSUC" parent="U19uHbFWXh7z" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="Zs1Gkv34uNgd" xmi.id="WnObbG8RQBXV" parent="vTu5KMjCR3iy" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="xccqXX4HPJSp" name="cascoMarAd">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="Wke2Amxay44w"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="md8liBfMqPWy" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="i6IWToSgjxwX" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="DxVIop196nUI" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="UswsueRgHXRx" type="ZzyBrmTKndE2" value="" name="DicionarioDerivada"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="mwerj97B134v" name="MudaVel">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="xKzyL1r0SPuQ" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="fTZw0zsh5ADZ" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="wgDfbACM6qDn" type="ZzyBrmTKndE2" value="" name="Velocidade"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Ok7RuJyozCTY" name="Fx">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="OM0LYUuq7oCZ" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="KfuOU5BPN8Mi" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="7DgZaZ0yJ7QC" type="ZzyBrmTKndE2" value="" name="Rot"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="uMzHULycWc95" name="Fy">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="0jkVLtaV1dyE" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="B93TFRfdodzK" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="7r9DfLkXhhnA" type="ZzyBrmTKndE2" value="" name="Rot"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="5bprEoBKdKXH" name="K">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ujAX2fogvb1s" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="gFoLxZVxGDSc" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="5256e3Ihe7Ys" type="ZzyBrmTKndE2" value="" name="Rot"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="8VnPgEzlE4ps" name="N">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="8YNMcDFhKmOZ" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="57ZhF5Z9nigp" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="NVTI4U8Cxwbc" type="ZzyBrmTKndE2" value="" name="Rot"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="xccqXX4HPJSp" xmi.id="Wke2Amxay44w" parent="jAOiOGcdYgPt" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="e5fSDUc9L38r" name="cascoTris">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="HUhZI1mI3I8g"/>
        <UML:Generalization xmi.idref="wgdcNQzqtIuL"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="f0shHyNcjT9w" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="YuVIOdEYQhR2" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="CpUvcqOKP3Xn" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rWT9DfjqecXv" type="ZzyBrmTKndE2" value="" name="DicionarioDerivadas"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="jAOiOGcdYgPt" name="casco">
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="y1YnZ5K8MX5C" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="po6ilaiicHV9" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="l7agqi5Y6J8h" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="KpIhNLt6SRkG" name="MostraVel">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="aKBCZhKuWaZr" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="9nnG6vvvk2cV" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vQxLrgZyTMCa" name="MostraPos">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="KDpqlMgembzb" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="G8T0A5TiOftx" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="HWaltmJ9um72" name="MudaVel">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="yvfqfkrVHajS" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="sYlEBc9VpxKY" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="J0C4Z9drfDcY" type="ZzyBrmTKndE2" value="" name="Velocidade"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Ctw1oGX7Ej9n" name="MudaPos">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="HsiTbsFRdryb" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="sncXyC4u5hll" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="QcGhAy7Mr3Ld" type="ZzyBrmTKndE2" value="" name="Posicao"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="40U9gFs6p9lx" name="Ma">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="zjBoqwlvm2pg" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="7sJwueZ9WHd5" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="7qWkhSKjRmr7" type="ZzyBrmTKndE2" value="" name="GrausDeLib"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="gMqAcRDjHhSw" name="M">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Q1OfgqanYEK2" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="7keYWTdVCoH1" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="k0uX2kBg6zog" type="ZzyBrmTKndE2" value="" name="GrausDeLib"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="hxXrmmqUml1m" name="Fx">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Qmey0y0fuVVg" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="TDQZAEEbDcEt" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="HLA14AlXLB5V" name="Fy">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="2FfwkAa1Ui0W" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="NJ4atHRJ33H2" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ql4Bw7fJOhrH" name="K">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="qnnIWnoMYqWS" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="yGa2Jp2L4hFo" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="xBlJsaapq8p9" name="N">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="LTKtHqLDz4Wq" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="xrT1YgnMUae0" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="e5fSDUc9L38r" xmi.id="wgdcNQzqtIuL" parent="jAOiOGcdYgPt" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="XoNupsggP9nc" comment="import Forcas" name="es">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="mWSQ60JfsnvE"/>
        <UML:Generalization xmi.idref="45OMXfUGXO0d"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="SVSIINVgUFVJ" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="0f9SuclIwMbO" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="PKcLUo6YiV0h" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="hzTOTfBtAdAT" type="ZzyBrmTKndE2" value="" name="entrada"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="XoNupsggP9nc" xmi.id="45OMXfUGXO0d" parent="U19uHbFWXh7z" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="cZ3Gc0fF9jEO" name="lemeMarAd">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="OYT4HJxBLUJ2"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ZuNuMguN9bpD" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ae3iDqv36Tkm" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="rFXhiUmGB3Ef" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="T1YQHTZrLwji" type="ZzyBrmTKndE2" value="" name="DicionarioDerivadas"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="xV28YGm0HKOY" name="MudaVel">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="mLf1d3YOzvSr" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="lxN6s7mSjqAu" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="g4xkXgWSBYZh" type="ZzyBrmTKndE2" value="" name="Velocidade"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="0FHh5SajUXU1" name="Fx">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="B21XjITS9oAs" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ByTMX22HLhJy" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="lrKiknXj2oQ7" type="ZzyBrmTKndE2" value="" name="Rot"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="E0oiWGhfFB0k" type="ZzyBrmTKndE2" value="" name="Eta"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="bfbdU1ig0UPU" name="Fy">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="c1GcWd4HjBFx" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="l690F7kP9jut" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="2NJ99S1k7cLZ" type="ZzyBrmTKndE2" value="" name="Rot"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="JzKSgEJgZbqj" name="K">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="js8JRy2UoTdE" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3rT8Sni4oyeK" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ZgbIrqD8nXZS" type="ZzyBrmTKndE2" value="" name="Rot"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="GJI5FuNoax4P" name="N">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="EumorrDd7jCs" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="nIYZn71Vx7oP" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="4orsFS4UlMX0" type="ZzyBrmTKndE2" value="" name="Rot"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="cZ3Gc0fF9jEO" xmi.id="OYT4HJxBLUJ2" parent="8ixpBvWruzFM" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="92QPIIFZZkxp" name="lemeTris">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="AA682SbgJmn5"/>
        <UML:Generalization xmi.idref="qBNmIBBMx0CD"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="k4A2ox7qxrQf" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="bhnWYDBvndsx" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="PbUxAio2ABPK" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Wbfyr6VbAdbz" type="ZzyBrmTKndE2" value="" name="DicionarioDerivadas"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="8ixpBvWruzFM" name="leme">
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="eQDn1LGz0NRt" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="7zTzwgJZ4VM5" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="yDBuXkJfQEUc" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="qa4rxVivgroB" name="MostraVel">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="jdkl66oweslZ" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="b5p2HHcME5JB" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="LTT0KH9uKywZ" name="MostraLeme">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Prq3hbd0360L" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="EYvSbEdIpL3v" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="L8Fd69CIf5lE" name="MostraPos">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Qm4Tq2mBA2oF" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="HMW7iX07Oq93" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="9yXp3G3KdYPJ" name="MudaLeme">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="foQIKnZP90pM" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="5OQSCZTcJX39" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="YqKgq6vx4Rm5" type="ZzyBrmTKndE2" value="" name="AngLeme"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="XJwpqyyMmH3c" name="MudaVel">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="385pP6Pk2wAO" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="NwXQLIV16tHO" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="hrnopbAKu59i" type="ZzyBrmTKndE2" value="" name="Velocidade"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="EgPIZegEVS3I" name="MudaPos">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="CZeg1hy2tZx9" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3DdvImdJsi8H" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="mV0pSADeqavQ" type="ZzyBrmTKndE2" value="" name="Posicao"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="MZTEFZU25UrV" name="fx">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="BPc2yX9I6cVM" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="e29Ta2rmcVQb" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="AxOFRFi3FpUp" name="fy">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="B7cHi5bs2z5R" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="sLZSp03yNd0J" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="CnSPaxESIms5" name="K">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="3Xh5XkUhVx75" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ku37X1Og90yr" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="uJWA3OEnIHsq" name="N">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="erA9oHEgZkoc" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="HHWOFSFJ0uMV" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="92QPIIFZZkxp" xmi.id="qBNmIBBMx0CD" parent="8ixpBvWruzFM" name=""/>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="LexWqMoMvTKm" xmi.id="5VGeLyjuP4J0" parent="U19uHbFWXh7z" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Zs1Gkv34uNgd" name="propMarAd">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="WnObbG8RQBXV"/>
        <UML:Generalization xmi.idref="TJdu1Z8PTyAj"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="tSAIchnR23q6" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="GfDIi4Mmh4hD" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="4fixVZYESEsh" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Y7RikjRcCbum" type="ZzyBrmTKndE2" value="" name="DicionarioDerivadas"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="cER4QHlzOCh9" name="MostraRot">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="5XjnaOyCcPE3" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="w6j6fbsvG3By" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="fz23AhA4nt8Q" name="MostraRotCom">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="mqlPDzQsxSu7" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="UyLi1Wf51Osb" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="749uwHIOFd7E" name="MostraVel">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Ph1M7vREya6u" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="7mJ889iuzRHB" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="pOI4zPG69aDH" name="MostraPos">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="lURh2Vbrsrtr" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="htAfIRqh7p3C" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="F8wOg7eNyo2G" name="MudaVel">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="8mN6aNKnEI6w" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="DsyKizXRSw8U" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="PhKHYB7lJ18z" type="ZzyBrmTKndE2" value="" name="Velocidade"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="IbLiXRCu8UAe" name="MudaPos">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="gHOxIWvOIGSq" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="dmbr3flLG61l" type="ZzyBrmTKndE2" value="" name="Posicao"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="8AjOQ9E4vnty" name="MudaRotCom">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="BMI4AA1bpGIW" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="TfHjjITFU7q8" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="x4Q0gfLmq2AE" type="ZzyBrmTKndE2" value="" name="Rot"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Xllzsa7ncVnH" name="MudaRot">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="GAzrfl8qr9mw" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="A63y6EDFaTKi" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="dJJSZcz6Ni5E" type="ZzyBrmTKndE2" value="" name="t"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="NzBwTTc4mwVK" name="Fx">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="qM6fVsbrqllH" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="WSOrAU5Pc5GI" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ENLzJqHpIfhR" name="Fy">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="yqkmbV3otPlA" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="9kqmn42dQ6Ht" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="F2yWhdxrLnb9" name="K">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="KTFBq0K62Ici" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="pbkFh16dsrQR" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="tXZEI8N7h6KO" name="N">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="b5lbLLJCsqRA" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="7QzxFPParclh" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vTu5KMjCR3iy" name="prop">
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="CNYP5ux7Emgl" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="h1292k5F6eeB" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3edLK4SFVNKq" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="WZGkLvUMZ5ht" name="MostraVel">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="DNcHzFQVoeD8" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="7A6cVOSAPUHP" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="ZhU6kAxrI3Ul" name="MostraRot">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="3HyqvByVrQZb" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="RwvoPBEcYorV" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="YXTqavb2rVoE" name="MostraRotCom">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="oeJd3sFbPgS0" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="g0oCpfhswdgq" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="b10QUof8nTKc" name="MostraPos">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="3HQSvqQUpQtK" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="7zS1c9rPlA2o" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="DWS0xla4k26L" name="MudaRotCom">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="E7px8tGFo0Au" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="9xkv6mh927Zv" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="v0QlOH3ZnTXk" type="ZzyBrmTKndE2" value="" name="Rot"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="kq3kvbgrZ4ax" name="MudaVel">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="ubCRfmO0Nr6S" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="LdV860sJ6fEE" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="YURNScHCQJxL" type="ZzyBrmTKndE2" value="" name="Velocidade"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="sylycxAAPbVp" name="MudaPos">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="NVxk4TZGEZpG" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Bnzb4uxwV7NA" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="uj8FZEhRBQNn" type="ZzyBrmTKndE2" value="" name="Posicao"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="TkCzsX7kGGzp" name="Fx">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="nlNzKAFlvPil" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="SfEd5ZQT4MB9" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="wqVA4SyU7A8D" name="Fy">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="RrcMGK5A8aLA" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="kWemspvfYGeq" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="2Hf8RlLBHxyA" name="K">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="2wi8U1JUIwck" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="krnJ8S9XHjrY" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="hvtysr8bhuup" name="N">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="pA386gqnZjkS" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="K1KbjB9l5qtZ" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="Zs1Gkv34uNgd" xmi.id="TJdu1Z8PTyAj" parent="vTu5KMjCR3iy" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="LexWqMoMvTKm" name="inte">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="ZnOiRxf0eSUC"/>
        <UML:Generalization xmi.idref="5VGeLyjuP4J0"/>
        <UML:Generalization xmi.idref="8ZC6hVxNt3Oq"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="dEFGgjQHMWga" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="EhK5LvKw9YCn" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="SyA2FDTp7BNR" type="ZzyBrmTKndE2" value="" name="self"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Fd2a9gAbeKbs" name="rk4">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="EhCMjuhmhUZo" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="Y2hdE22ShMV2" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="FqzOMB9boC9v" type="ZzyBrmTKndE2" value="" name="function"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="qKUVc6N882kM" type="ZzyBrmTKndE2" value="" name="dt"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="5mpm9KnM8mjS" type="ZzyBrmTKndE2" value="" name="t0"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="vs2i2BdtT8M4" type="ZzyBrmTKndE2" value="" name="y0"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="mM8t6rL1kNjk" name="euler">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="CipAPdDykGGD" type="CO5PVOOuQgbf"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="vYgo2HnWgwZI" type="CO5PVOOuQgbf" value="" name="Incremento"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="0K8PQbKw1EPB" type="CO5PVOOuQgbf" value="" name="Posicaot"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="n0whjw071dQq" type="CO5PVOOuQgbf" value="" name="Passo"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization discriminator="" visibility="public" isSpecification="false" namespace="Logical View" child="LexWqMoMvTKm" xmi.id="8ZC6hVxNt3Oq" parent="U19uHbFWXh7z" name=""/>
      <UML:Class visibility="public" isSpecification="false" namespace="Logical View" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="GEZkAvsIRUq9" name="navio">
       <UML:Classifier.feature>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Ta4hrIEbSARi" name="__init__">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="KkXdSzGGWNbv" type="ZzyBrmTKndE2"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="ZtWhy0cTLhTd" type="ZzyBrmTKndE2" value="" name="self"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="oZ7LQqNuQRZF" type="ZzyBrmTKndE2" value="" name="DicionarioDerivadas"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="imo8uFpT8LA6" type="ZzyBrmTKndE2" value="" name="Nome"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="WiwoOXGeOhrq" name="simula">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="5XtbhtLcGp8Z" type="An3dx0U9MZWs"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="3yhW78X6va8L" type="ZzyBrmTKndE2" value="'simula'" name="met "/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="gDxtEL8eFsTG" type="vukMYJ1xTgqt" value="0." name="t0"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="FUz9jAsYpyd8" type="vukMYJ1xTgqt" value="0.5" name="dt"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="IgO6PqpM3cuf" type="vukMYJ1xTgqt" value="100" name="t"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="azWeY7EcRPqO" type="HYZVxBxt0JOC" value="4" name="GrausDeLib"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="GFHxW4tYMwzk" type="ZzyBrmTKndE2" value="'zigzag10/10'" name="tipo"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="fRxgOVVEvPGa" type="CO5PVOOuQgbf" value="sp.array([32])" name="Rot"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Tdi1NEaUbflF" name="MudaLeme">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="elAyEK5haIk3" type="CO5PVOOuQgbf" value="" name="AngLeme"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="spWVlmWuuZ0J" name="MudaPos">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="WEVjmDyuSUIe" type="CO5PVOOuQgbf" value="" name="Posicao"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="WM0to3W7pNsG" name="MudaRotCom">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="7PTF8oszwtfJ" type="CO5PVOOuQgbf" value="" name="Rot"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="QmOHepQlCtyL" name="MudaVel">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="q3YeeYuCUsz7" type="CO5PVOOuQgbf" value="" name="Vel"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="aSRex2r4Ve2o" name="f">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="EQn8672Pn3q2" type="CO5PVOOuQgbf"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="wBuFmiei1NFt" type="HYZVxBxt0JOC" value="" name="GrausDeLib"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Pz0JSFJuA37O" name="H">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="j0RrtzPTyCsv" type="CO5PVOOuQgbf"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="pDd2bDJP0OoA" type="HYZVxBxt0JOC" value="4" name="GrausDeLib"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="rk5AkbqqnnWi" name="VetF">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Vh3yHeEm5Z4U" type="CO5PVOOuQgbf"/>
          <UML:Parameter visibility="private" isSpecification="false" xmi.id="VXcKXmez55ah" type="HYZVxBxt0JOC" value="4" name="GrausDeLib"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="QOm7gc9MXNq2" name="CalcFx">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="wUAXyhGffgWY" type="CO5PVOOuQgbf"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Ns6tSJDrbyDd" name="CalcFy">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="fu1b4rWZWZWo" type="CO5PVOOuQgbf"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="BiaHHcjD6sj2" name="CalcN">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="Or4ryZgA3wHx" type="CO5PVOOuQgbf"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation visibility="public" isSpecification="false" isQuery="false" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="vCyeRXmNBnRg" name="CalcK">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter kind="return" xmi.id="LAhSHkoZy4Ph" type="CO5PVOOuQgbf"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="u9lAs8QuQiG9" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="lVBdzLZicjY2" type="92QPIIFZZkxp" name="" aggregation="composite"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="iLopyjZstK0l" type="GEZkAvsIRUq9" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="55kb7TxtIvcr" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="lVBmEbBsQIlO" type="92QPIIFZZkxp" name="" aggregation="composite"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="B8YgV0hY3S7A" type="GEZkAvsIRUq9" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="2l7BVKmgCByx" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="Z847mX6T37tA" type="GEZkAvsIRUq9" name="" aggregation="composite"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="ImFHxEvzx1AQ" type="92QPIIFZZkxp" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="6V63Sf9Ult1p" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="K4wEFC0SUyeN" type="GEZkAvsIRUq9" name="" aggregation="composite"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="vcM62h17C58d" type="cZ3Gc0fF9jEO" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="H7T87ISBDgOP" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="fordTFW3bc5H" type="GEZkAvsIRUq9" name="" aggregation="composite"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="bARgG4PVAsdF" type="xccqXX4HPJSp" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="96OMmljPZb02" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="oX5N99ejH4NY" type="GEZkAvsIRUq9" name="" aggregation="composite"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="8m3GdhVklu6V" type="e5fSDUc9L38r" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="aPAJhEgDLREZ" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="4v3oevsAaf5k" type="vTu5KMjCR3iy" name="" aggregation="composite"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="20zATGg1fpKK" type="vTu5KMjCR3iy" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="3yXMPmuRfxDK" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="s5UQjZAjX8ry" type="GEZkAvsIRUq9" name="" aggregation="composite"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="OYz3NHMOEtjb" type="vTu5KMjCR3iy" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Association visibility="public" isSpecification="false" namespace="Logical View" xmi.id="6W33YQLunXlW" name="">
       <UML:Association.connection>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="8P79ihMJ7eOx" type="XoNupsggP9nc" name="" aggregation="none"/>
        <UML:AssociationEnd changeability="changeable" visibility="public" isNavigable="true" isSpecification="false" xmi.id="byxH56o9asD6" type="GEZkAvsIRUq9" name="" aggregation="none"/>
       </UML:Association.connection>
      </UML:Association>
     </UML:Namespace.ownedElement>
     <XMI.extension xmi.extender="umbrello">
      <diagrams>
       <diagram showopsig="1" linecolor="#ff0000" snapx="10" showattribassocs="1" snapy="10" linewidth="0" showattsig="1" showpubliconly="1" showpackage="1" showstereotype="1" name="class diagram" font="Sans Serif,9,-1,0,50,0,0,0,0,0" canvasheight="917" canvaswidth="1648" localid="" snapcsgrid="0" showgrid="1" showops="1" usefillcolor="1" fillcolor="#e1f1ff" zoom="100" xmi.id="I0R4IgEla2UI" documentation="" showscope="1" snapgrid="1" showatts="1" type="1">
        <widgets>
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="1" showpackage="1" x="150" showattsigs="601" showstereotype="1" y="500" showattributes="1" font="Sans Serif,9,-1,0,75,0,0,0,0,0" width="364" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="cZ3Gc0fF9jEO" showscope="1" height="105" showopsigs="601"/>
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="1" showpackage="1" x="160" showattsigs="601" showstereotype="1" y="360" showattributes="1" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="364" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="92QPIIFZZkxp" showscope="1" height="35" showopsigs="601"/>
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="1" showpackage="1" x="180" showattsigs="601" showstereotype="1" y="50" showattributes="1" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="326" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="8ixpBvWruzFM" showscope="1" height="175" showopsigs="601"/>
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="1" showpackage="1" x="1110" showattsigs="601" showstereotype="1" y="490" showattributes="1" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="358" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="xccqXX4HPJSp" showscope="1" height="105" showopsigs="601"/>
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="1" showpackage="1" x="1110" showattsigs="601" showstereotype="1" y="340" showattributes="1" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="364" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="e5fSDUc9L38r" showscope="1" height="35" showopsigs="601"/>
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="1" showpackage="1" x="1120" showattsigs="601" showstereotype="1" y="50" showattributes="1" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="317" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="jAOiOGcdYgPt" showscope="1" height="175" showopsigs="601"/>
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="1" showpackage="1" x="600" showattsigs="601" showstereotype="1" y="710" showattributes="1" font="Sans Serif,9,-1,0,75,0,0,0,0,0" width="1044" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="GEZkAvsIRUq9" showscope="1" height="203" showopsigs="601"/>
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="1" showpackage="1" x="650" showattsigs="601" showstereotype="1" y="100" showattributes="1" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="317" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="vTu5KMjCR3iy" showscope="1" height="189" showopsigs="601"/>
         <classwidget linecolor="none" usesdiagramfillcolor="1" linewidth="none" showoperations="1" usesdiagramusefillcolor="1" showpubliconly="1" showpackage="1" x="690" showattsigs="601" showstereotype="1" y="810" showattributes="1" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="293" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="XoNupsggP9nc" showscope="1" height="35" showopsigs="601"/>
        </widgets>
        <messages/>
        <associations>
         <assocwidget indexa="1" indexb="1" widgetaid="92QPIIFZZkxp" linecolor="none" totalcounta="2" xmi.id="AA682SbgJmn5" widgetbid="8ixpBvWruzFM" totalcountb="3" type="500" linewidth="none">
          <linepath>
           <startpoint startx="300" starty="360"/>
           <endpoint endx="300" endy="230"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="cZ3Gc0fF9jEO" linecolor="none" totalcounta="2" xmi.id="OYT4HJxBLUJ2" widgetbid="8ixpBvWruzFM" totalcountb="3" type="500" linewidth="none">
          <linepath>
           <startpoint startx="420" starty="500"/>
           <endpoint endx="420" endy="230"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="e5fSDUc9L38r" linecolor="none" totalcounta="2" xmi.id="HUhZI1mI3I8g" widgetbid="jAOiOGcdYgPt" totalcountb="3" type="500" linewidth="none">
          <linepath>
           <startpoint startx="1200" starty="340"/>
           <endpoint endx="1200" endy="230"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="2" widgetaid="xccqXX4HPJSp" linecolor="none" totalcounta="2" xmi.id="Wke2Amxay44w" widgetbid="jAOiOGcdYgPt" totalcountb="3" type="500" linewidth="none">
          <linepath>
           <startpoint startx="1280" starty="490"/>
           <endpoint endx="1280" endy="230"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="2" indexb="1" widgetaid="GEZkAvsIRUq9" linecolor="none" totalcounta="6" xmi.id="2l7BVKmgCByx" widgetbid="92QPIIFZZkxp" totalcountb="2" type="510" linewidth="none">
          <linepath>
           <startpoint startx="600" starty="710"/>
           <endpoint endx="520" endy="400"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="GEZkAvsIRUq9" linecolor="none" totalcounta="6" xmi.id="6V63Sf9Ult1p" widgetbid="cZ3Gc0fF9jEO" totalcountb="2" type="510" linewidth="none">
          <linepath>
           <startpoint startx="600" starty="710"/>
           <endpoint endx="510" endy="610"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="5" indexb="1" widgetaid="GEZkAvsIRUq9" linecolor="none" totalcounta="6" xmi.id="H7T87ISBDgOP" widgetbid="xccqXX4HPJSp" totalcountb="2" type="510" linewidth="none">
          <linepath>
           <startpoint startx="1110" starty="710"/>
           <endpoint endx="1110" endy="600"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="4" indexb="1" widgetaid="GEZkAvsIRUq9" linecolor="none" totalcounta="6" xmi.id="96OMmljPZb02" widgetbid="e5fSDUc9L38r" totalcountb="2" type="510" linewidth="none">
          <linepath>
           <startpoint startx="1110" starty="710"/>
           <endpoint endx="1110" endy="380"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="3" indexb="1" widgetaid="GEZkAvsIRUq9" linecolor="none" totalcounta="6" xmi.id="3yXMPmuRfxDK" widgetbid="vTu5KMjCR3iy" totalcountb="2" type="510" linewidth="none">
          <linepath>
           <startpoint startx="830" starty="710"/>
           <endpoint endx="830" endy="290"/>
          </linepath>
         </assocwidget>
         <assocwidget indexa="1" indexb="1" widgetaid="XoNupsggP9nc" linecolor="none" totalcounta="2" xmi.id="6W33YQLunXlW" widgetbid="GEZkAvsIRUq9" totalcountb="2" type="503" linewidth="none">
          <linepath>
           <startpoint startx="820" starty="810"/>
           <endpoint endx="820" endy="810"/>
          </linepath>
         </assocwidget>
        </associations>
       </diagram>
       <diagram showopsig="1" linecolor="#ff0000" snapx="10" showattribassocs="1" snapy="10" linewidth="0" showattsig="1" showpubliconly="1" showpackage="1" showstereotype="1" name="SimulacaoZigZag" font="Sans Serif,9,-1,0,50,0,0,0,0,0" canvasheight="2363" canvaswidth="1638" localid="5UNwfGfE7vfG" snapcsgrid="0" showgrid="0" showops="1" usefillcolor="1" fillcolor="#e1f1ff" zoom="100" xmi.id="BVuIA0zNWOE2" documentation="" showscope="1" snapgrid="0" showatts="1" type="3">
        <widgets>
         <objectwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" usesdiagramusefillcolor="1" instancename="" x="227" decon="0" showstereotype="1" y="48" font="Sans Serif,9,-1,0,50,0,1,0,0,0" localid="17HyUlNinJEc" width="50" isinstance="0" multipleinstance="0" usefillcolor="1" fillcolor="#e1f1ff" xmi.id="XoNupsggP9nc" height="24" drawasactor="0"/>
         <objectwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" usesdiagramusefillcolor="1" instancename="" x="347" decon="0" showstereotype="1" y="48" font="Sans Serif,9,-1,0,50,0,1,0,0,0" localid="OPyhYWH5Lovh" width="54" isinstance="0" multipleinstance="0" usefillcolor="1" fillcolor="#e1f1ff" xmi.id="GEZkAvsIRUq9" height="24" drawasactor="0"/>
         <objectwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" usesdiagramusefillcolor="1" instancename="" x="610" decon="0" showstereotype="1" y="48" font="Sans Serif,9,-1,0,50,0,1,0,0,0" localid="09uDurpJBzga" width="89" isinstance="0" multipleinstance="0" usefillcolor="1" fillcolor="#e1f1ff" xmi.id="cZ3Gc0fF9jEO" height="24" drawasactor="0"/>
         <objectwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" usesdiagramusefillcolor="1" instancename="" x="818" decon="0" showstereotype="1" y="48" font="Sans Serif,9,-1,0,50,0,1,0,0,0" localid="6mdSe342pYix" width="88" isinstance="0" multipleinstance="0" usefillcolor="1" fillcolor="#e1f1ff" xmi.id="Zs1Gkv34uNgd" height="24" drawasactor="0"/>
         <objectwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" usesdiagramusefillcolor="1" instancename="" x="1053" decon="0" showstereotype="1" y="48" font="Sans Serif,9,-1,0,50,0,1,0,0,0" localid="ZgLiZXdOKuZH" width="94" isinstance="0" multipleinstance="0" usefillcolor="1" fillcolor="#e1f1ff" xmi.id="xccqXX4HPJSp" height="24" drawasactor="0"/>
         <objectwidget linecolor="#ff0000" usesdiagramfillcolor="0" linewidth="none" usesdiagramusefillcolor="1" instancename="" x="1296" decon="0" showstereotype="1" y="48" font="Sans Serif,9,-1,0,50,0,1,0,0,0" localid="5UNwfGfE7vfG" width="50" isinstance="0" multipleinstance="0" usefillcolor="1" fillcolor="#e1f1ff" xmi.id="LexWqMoMvTKm" height="24" drawasactor="0"/>
        </widgets>
        <messages>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="OPyhYWH5Lovh" textid="lkqh3yk5vHyZ" operation="Ta4hrIEbSARi" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="253" showstereotype="1" y="91" widgetaid="17HyUlNinJEc" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="120" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="Ta4hrIEbSARi" height="8" sequencemessagetype="1001">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="258" showstereotype="1" y="73" text=": __init__(self : string, DicionarioDerivadas : string, Nome : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="446" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="lkqh3yk5vHyZ" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="OPyhYWH5Lovh" textid="tGzgYsMVkiTs" operation="WiwoOXGeOhrq" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="253" showstereotype="1" y="133" widgetaid="17HyUlNinJEc" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="120" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="WiwoOXGeOhrq" height="8" sequencemessagetype="1001">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="258" showstereotype="1" y="115" text=": simula(met  : string = 'simula', t0 : float = 0., dt : float = 0.5, t : float = 100, GrausDeLib : integer = 4, tipo : string = 'zigzag10/10', Rot : array = sp.array([32])) : tuple" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="1035" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="tGzgYsMVkiTs" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="OPyhYWH5Lovh" textid="ffEtwZQ9l1Yo" operation="Tdi1NEaUbflF" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="372" showstereotype="1" y="169" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="50" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="Tdi1NEaUbflF" height="98" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="377" showstereotype="1" y="151" text=": MudaLeme(AngLeme : array)" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="705" width="192" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="ffEtwZQ9l1Yo" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="OPyhYWH5Lovh" textid="3d8RkuSIigDt" operation="spWVlmWuuZ0J" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="372" showstereotype="1" y="297" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="50" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="spWVlmWuuZ0J" height="161" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="377" showstereotype="1" y="279" text=": MudaPos(Posicao : array)" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="705" width="166" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="3d8RkuSIigDt" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="09uDurpJBzga" textid="u0gRxAkWs0Uz" operation="9yXp3G3KdYPJ" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="375" showstereotype="1" y="210" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="278" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="9yXp3G3KdYPJ" height="8" sequencemessagetype="1001">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="380" showstereotype="1" y="192" text=": MudaLeme(self : string, AngLeme : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="318" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="u0gRxAkWs0Uz" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="09uDurpJBzga" textid="vJMUTL3qwKNK" operation="L8Fd69CIf5lE" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="375" showstereotype="1" y="347" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="278" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="L8Fd69CIf5lE" height="8" sequencemessagetype="1001">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="380" showstereotype="1" y="329" text=": MostraPos(self : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="200" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="vJMUTL3qwKNK" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="6mdSe342pYix" textid="G77s2noeWHH2" operation="pOI4zPG69aDH" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="375" showstereotype="1" y="387" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="486" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="pOI4zPG69aDH" height="8" sequencemessagetype="1001">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="380" showstereotype="1" y="369" text=": MostraPos(self : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="200" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="G77s2noeWHH2" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="ZgLiZXdOKuZH" textid="UMqf258Qausm" operation="Ctw1oGX7Ej9n" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="375" showstereotype="1" y="426" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="724" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="Ctw1oGX7Ej9n" height="8" sequencemessagetype="1001">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="381" showstereotype="1" y="408" text=": MudaPos(self : string, Posicao : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="292" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="UMqf258Qausm" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="OPyhYWH5Lovh" textid="kcqXAsYhRoyb" operation="QmOHepQlCtyL" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="372" showstereotype="1" y="526" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="50" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="QmOHepQlCtyL" height="149" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="377" showstereotype="1" y="508" text=": MudaVel(Vel : array)" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="705" width="136" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="kcqXAsYhRoyb" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="09uDurpJBzga" textid="n0tzOMSqpy45" operation="qa4rxVivgroB" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="375" showstereotype="1" y="567" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="278" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="qa4rxVivgroB" height="8" sequencemessagetype="1001">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="426" showstereotype="1" y="549" text=": MostraVel(self : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="197" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="n0tzOMSqpy45" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="6mdSe342pYix" textid="fnKgvl44o7X1" operation="F8wOg7eNyo2G" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="375" showstereotype="1" y="590" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="486" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="F8wOg7eNyo2G" height="8" sequencemessagetype="1001">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="381" showstereotype="1" y="572" text=": MudaVel(self : string, Velocidade : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="309" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="fnKgvl44o7X1" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="ZgLiZXdOKuZH" textid="nQ2IRW5gF7WX" operation="KpIhNLt6SRkG" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="375" showstereotype="1" y="624" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="724" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="KpIhNLt6SRkG" height="8" sequencemessagetype="1001">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="380" showstereotype="1" y="606" text=": MostraVel(self : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="197" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="nQ2IRW5gF7WX" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="OPyhYWH5Lovh" textid="ypoAIW3MIl0o" operation="aSRex2r4Ve2o" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="372" showstereotype="1" y="841" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="50" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="aSRex2r4Ve2o" height="1418" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="377" showstereotype="1" y="823" text=": f(GrausDeLib : integer) : array" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="705" width="197" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="ypoAIW3MIl0o" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="OPyhYWH5Lovh" textid="EQSeka7zcxPt" operation="Pz0JSFJuA37O" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="372" showstereotype="1" y="1922" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="50" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="Pz0JSFJuA37O" height="274" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="377" showstereotype="1" y="1904" text=": H(GrausDeLib : integer = 4) : array" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="705" width="228" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="EQSeka7zcxPt" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="OPyhYWH5Lovh" textid="ictQze8tvsdA" operation="rk5AkbqqnnWi" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="372" showstereotype="1" y="925" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="50" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="rk5AkbqqnnWi" height="951" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="377" showstereotype="1" y="907" text=": VetF(GrausDeLib : integer = 4) : array" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="705" width="245" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="ictQze8tvsdA" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="OPyhYWH5Lovh" textid="kn5q6uqHfCNV" operation="QOm7gc9MXNq2" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="372" showstereotype="1" y="972" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="50" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="QOm7gc9MXNq2" height="196" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="377" showstereotype="1" y="954" text=": CalcFx() : array" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="705" width="108" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="kn5q6uqHfCNV" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="OPyhYWH5Lovh" textid="puGakZyVhPoQ" operation="BiaHHcjD6sj2" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="372" showstereotype="1" y="1570" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="50" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="BiaHHcjD6sj2" height="220" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="377" showstereotype="1" y="1552" text=": CalcN() : array" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="705" width="103" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="puGakZyVhPoQ" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="OPyhYWH5Lovh" textid="tyCGcZ1FwsMF" operation="Ns6tSJDrbyDd" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="372" showstereotype="1" y="1265" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="50" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="Ns6tSJDrbyDd" height="219" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="377" showstereotype="1" y="1247" text=": CalcFy() : array" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="705" width="107" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="tyCGcZ1FwsMF" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="5UNwfGfE7vfG" textid="BOz2vGdHN4ZZ" operation="mM8t6rL1kNjk" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="375" showstereotype="1" y="2331" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="945" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="mM8t6rL1kNjk" height="8" sequencemessagetype="1001">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="646" showstereotype="1" y="2313" text=": euler(Incremento : array, Posicaot : array, Passo : array) : array" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="395" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="BOz2vGdHN4ZZ" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="09uDurpJBzga" textid="VtXPZLzhytLL" operation="bfbdU1ig0UPU" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="374" showstereotype="1" y="1322" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="288" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="bfbdU1ig0UPU" height="32" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="379" showstereotype="1" y="1304" text=": Fy(self : string, Rot : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="227" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="VtXPZLzhytLL" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="6mdSe342pYix" textid="ImxSTXRutvbE" operation="NzBwTTc4mwVK" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="374" showstereotype="1" y="1076" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="496" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="NzBwTTc4mwVK" height="32" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="379" showstereotype="1" y="1058" text=": Fx(self : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="154" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="ImxSTXRutvbE" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="09uDurpJBzga" textid="BYjQxR4hemtn" operation="0FHh5SajUXU1" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="374" showstereotype="1" y="1002" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="288" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="0FHh5SajUXU1" height="32" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="379" showstereotype="1" y="984" text=": Fx(self : string, Rot : string, Eta : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="303" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="BYjQxR4hemtn" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="ZgLiZXdOKuZH" textid="FBWuZz0ufW9l" operation="Ok7RuJyozCTY" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="374" showstereotype="1" y="1124" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="734" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="Ok7RuJyozCTY" height="32" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="379" showstereotype="1" y="1106" text=": Fx(self : string, Rot : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="228" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="FBWuZz0ufW9l" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="09uDurpJBzga" textid="0PncwF2uRgmc" operation="GJI5FuNoax4P" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="374" showstereotype="1" y="1620" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="288" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="GJI5FuNoax4P" height="32" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="379" showstereotype="1" y="1602" text=": N(self : string, Rot : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="223" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="0PncwF2uRgmc" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="6mdSe342pYix" textid="Yh96gcloznt0" operation="tXZEI8N7h6KO" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="374" showstereotype="1" y="1671" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="496" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="tXZEI8N7h6KO" height="32" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="379" showstereotype="1" y="1653" text=": N(self : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="149" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="Yh96gcloznt0" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="ZgLiZXdOKuZH" textid="pcxHGCpz80Ss" operation="8VnPgEzlE4ps" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="374" showstereotype="1" y="1723" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="734" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="8VnPgEzlE4ps" height="32" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="379" showstereotype="1" y="1705" text=": N(self : string, Rot : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="223" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="pcxHGCpz80Ss" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="6mdSe342pYix" textid="71sSCy6i3diO" operation="ENLzJqHpIfhR" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="374" showstereotype="1" y="1368" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="496" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="ENLzJqHpIfhR" height="32" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="379" showstereotype="1" y="1350" text=": Fy(self : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="153" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="71sSCy6i3diO" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="ZgLiZXdOKuZH" textid="cVuCMsPuBpmQ" operation="uMzHULycWc95" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="374" showstereotype="1" y="1423" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="734" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="uMzHULycWc95" height="32" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="379" showstereotype="1" y="1405" text=": Fy(self : string, Rot : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="227" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="cVuCMsPuBpmQ" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="ZgLiZXdOKuZH" textid="0frlaLoJmmk4" operation="40U9gFs6p9lx" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="374" showstereotype="1" y="1981" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="734" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="40U9gFs6p9lx" height="32" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="379" showstereotype="1" y="1963" text=": Ma(self : string, GrausDeLib : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="281" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="0frlaLoJmmk4" height="18"/>
         </messagewidget>
         <messagewidget linecolor="none" usesdiagramfillcolor="1" widgetbid="ZgLiZXdOKuZH" textid="ms9JPCjSSj82" operation="gMqAcRDjHhSw" linewidth="none" seqnum="" usesdiagramusefillcolor="1" x="374" showstereotype="1" y="2063" widgetaid="OPyhYWH5Lovh" font="Sans Serif,9,-1,0,50,0,0,0,0,0" width="734" isinstance="0" usefillcolor="1" fillcolor="none" xmi.id="gMqAcRDjHhSw" height="32" sequencemessagetype="1000">
          <floatingtext linecolor="none" usesdiagramfillcolor="1" linewidth="none" usesdiagramusefillcolor="1" x="379" showstereotype="1" y="2045" text=": M(self : string, GrausDeLib : string) : string" font="Sans Serif,9,-1,0,50,0,0,0,0,0" pretext="" role="704" width="274" isinstance="0" posttext="" usefillcolor="1" fillcolor="none" xmi.id="ms9JPCjSSj82" height="18"/>
         </messagewidget>
        </messages>
        <associations/>
       </diagram>
      </diagrams>
     </XMI.extension>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Use Case View" name="Use Case View">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Component View" name="Component View">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Deployment View" name="Deployment View">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model stereotype="folder" visibility="public" isSpecification="false" namespace="m1" isAbstract="false" isLeaf="false" isRoot="false" xmi.id="Entity Relationship Model" name="Entity Relationship Model">
     <UML:Namespace.ownedElement/>
    </UML:Model>
   </UML:Namespace.ownedElement>
  </UML:Model>
 </XMI.content>
 <XMI.extensions xmi.extender="umbrello">
  <docsettings viewid="BVuIA0zNWOE2" uniqueid="swHUpUu2Ru5b" documentation=""/>
  <listview>
   <listitem open="1" type="800" id="Views">
    <listitem open="0" type="801" id="Logical View">
     <listitem open="0" type="807" id="I0R4IgEla2UI" label="class diagram"/>
     <listitem open="0" type="810" id="BVuIA0zNWOE2" label="SimulacaoZigZag"/>
     <listitem open="0" type="813" id="jAOiOGcdYgPt">
      <listitem open="0" type="815" id="y1YnZ5K8MX5C"/>
      <listitem open="0" type="815" id="KpIhNLt6SRkG"/>
      <listitem open="0" type="815" id="vQxLrgZyTMCa"/>
      <listitem open="0" type="815" id="HWaltmJ9um72"/>
      <listitem open="0" type="815" id="Ctw1oGX7Ej9n"/>
      <listitem open="0" type="815" id="40U9gFs6p9lx"/>
      <listitem open="0" type="815" id="gMqAcRDjHhSw"/>
      <listitem open="0" type="815" id="hxXrmmqUml1m"/>
      <listitem open="0" type="815" id="HLA14AlXLB5V"/>
      <listitem open="0" type="815" id="ql4Bw7fJOhrH"/>
      <listitem open="0" type="815" id="xBlJsaapq8p9"/>
     </listitem>
     <listitem open="0" type="813" id="xccqXX4HPJSp">
      <listitem open="0" type="815" id="md8liBfMqPWy"/>
      <listitem open="0" type="815" id="mwerj97B134v"/>
      <listitem open="0" type="815" id="Ok7RuJyozCTY"/>
      <listitem open="0" type="815" id="uMzHULycWc95"/>
      <listitem open="0" type="815" id="5bprEoBKdKXH"/>
      <listitem open="0" type="815" id="8VnPgEzlE4ps"/>
     </listitem>
     <listitem open="0" type="813" id="e5fSDUc9L38r">
      <listitem open="0" type="815" id="f0shHyNcjT9w"/>
     </listitem>
     <listitem open="0" type="813" id="XoNupsggP9nc">
      <listitem open="0" type="815" id="SVSIINVgUFVJ"/>
     </listitem>
     <listitem open="0" type="813" id="LexWqMoMvTKm">
      <listitem open="0" type="815" id="dEFGgjQHMWga"/>
      <listitem open="0" type="815" id="Fd2a9gAbeKbs"/>
      <listitem open="0" type="815" id="mM8t6rL1kNjk"/>
     </listitem>
     <listitem open="0" type="813" id="8ixpBvWruzFM">
      <listitem open="0" type="815" id="eQDn1LGz0NRt"/>
      <listitem open="0" type="815" id="qa4rxVivgroB"/>
      <listitem open="0" type="815" id="LTT0KH9uKywZ"/>
      <listitem open="0" type="815" id="L8Fd69CIf5lE"/>
      <listitem open="0" type="815" id="9yXp3G3KdYPJ"/>
      <listitem open="0" type="815" id="XJwpqyyMmH3c"/>
      <listitem open="0" type="815" id="EgPIZegEVS3I"/>
      <listitem open="0" type="815" id="MZTEFZU25UrV"/>
      <listitem open="0" type="815" id="AxOFRFi3FpUp"/>
      <listitem open="0" type="815" id="CnSPaxESIms5"/>
      <listitem open="0" type="815" id="uJWA3OEnIHsq"/>
     </listitem>
     <listitem open="0" type="813" id="cZ3Gc0fF9jEO">
      <listitem open="0" type="815" id="ZuNuMguN9bpD"/>
      <listitem open="0" type="815" id="xV28YGm0HKOY"/>
      <listitem open="0" type="815" id="0FHh5SajUXU1"/>
      <listitem open="0" type="815" id="bfbdU1ig0UPU"/>
      <listitem open="0" type="815" id="JzKSgEJgZbqj"/>
      <listitem open="0" type="815" id="GJI5FuNoax4P"/>
     </listitem>
     <listitem open="0" type="813" id="92QPIIFZZkxp">
      <listitem open="0" type="815" id="k4A2ox7qxrQf"/>
     </listitem>
     <listitem open="0" type="813" id="GEZkAvsIRUq9">
      <listitem open="0" type="815" id="Ta4hrIEbSARi"/>
      <listitem open="0" type="815" id="WiwoOXGeOhrq"/>
      <listitem open="0" type="815" id="Tdi1NEaUbflF"/>
      <listitem open="0" type="815" id="spWVlmWuuZ0J"/>
      <listitem open="0" type="815" id="WM0to3W7pNsG"/>
      <listitem open="0" type="815" id="QmOHepQlCtyL"/>
      <listitem open="0" type="815" id="aSRex2r4Ve2o"/>
      <listitem open="0" type="815" id="Pz0JSFJuA37O"/>
      <listitem open="0" type="815" id="rk5AkbqqnnWi"/>
      <listitem open="0" type="815" id="QOm7gc9MXNq2"/>
      <listitem open="0" type="815" id="Ns6tSJDrbyDd"/>
      <listitem open="0" type="815" id="BiaHHcjD6sj2"/>
      <listitem open="0" type="815" id="vCyeRXmNBnRg"/>
     </listitem>
     <listitem open="0" type="813" id="vTu5KMjCR3iy">
      <listitem open="0" type="815" id="CNYP5ux7Emgl"/>
      <listitem open="0" type="815" id="WZGkLvUMZ5ht"/>
      <listitem open="0" type="815" id="ZhU6kAxrI3Ul"/>
      <listitem open="0" type="815" id="YXTqavb2rVoE"/>
      <listitem open="0" type="815" id="b10QUof8nTKc"/>
      <listitem open="0" type="815" id="DWS0xla4k26L"/>
      <listitem open="0" type="815" id="kq3kvbgrZ4ax"/>
      <listitem open="0" type="815" id="sylycxAAPbVp"/>
      <listitem open="0" type="815" id="TkCzsX7kGGzp"/>
      <listitem open="0" type="815" id="wqVA4SyU7A8D"/>
      <listitem open="0" type="815" id="2Hf8RlLBHxyA"/>
      <listitem open="0" type="815" id="hvtysr8bhuup"/>
     </listitem>
     <listitem open="0" type="813" id="Zs1Gkv34uNgd">
      <listitem open="0" type="815" id="tSAIchnR23q6"/>
      <listitem open="0" type="815" id="cER4QHlzOCh9"/>
      <listitem open="0" type="815" id="fz23AhA4nt8Q"/>
      <listitem open="0" type="815" id="749uwHIOFd7E"/>
      <listitem open="0" type="815" id="pOI4zPG69aDH"/>
      <listitem open="0" type="815" id="F8wOg7eNyo2G"/>
      <listitem open="0" type="815" id="IbLiXRCu8UAe"/>
      <listitem open="0" type="815" id="8AjOQ9E4vnty"/>
      <listitem open="0" type="815" id="Xllzsa7ncVnH"/>
      <listitem open="0" type="815" id="NzBwTTc4mwVK"/>
      <listitem open="0" type="815" id="ENLzJqHpIfhR"/>
      <listitem open="0" type="815" id="F2yWhdxrLnb9"/>
      <listitem open="0" type="815" id="tXZEI8N7h6KO"/>
     </listitem>
     <listitem open="0" type="830" id="Datatypes">
      <listitem open="1" type="829" id="CO5PVOOuQgbf"/>
      <listitem open="1" type="829" id="AOHWLqUH7XLt"/>
      <listitem open="1" type="829" id="vlu20Q01RmXa"/>
      <listitem open="1" type="829" id="sSgOna5gJxiJ"/>
      <listitem open="1" type="829" id="v9rmRUupjQBZ"/>
      <listitem open="1" type="829" id="LhJmRqKNzC7Q"/>
      <listitem open="1" type="829" id="P9htSrcCTIZF"/>
      <listitem open="1" type="829" id="e2GOSPvJpaha"/>
      <listitem open="1" type="829" id="8kGRhxj2e2m3"/>
      <listitem open="1" type="829" id="q6QnGYCvYQH0"/>
      <listitem open="1" type="829" id="pCHcmyCsiQKN"/>
      <listitem open="1" type="829" id="L1Nx191rERcU"/>
      <listitem open="1" type="829" id="ViPwMDpsesqK"/>
      <listitem open="1" type="829" id="xoNVEcU3pldZ"/>
      <listitem open="1" type="829" id="ipSOEkmZl9Xk"/>
      <listitem open="1" type="829" id="vukMYJ1xTgqt"/>
      <listitem open="1" type="829" id="WQ5zgcDrQGUN"/>
      <listitem open="1" type="829" id="HYZVxBxt0JOC"/>
      <listitem open="1" type="829" id="GwUdTyTNtBjR"/>
      <listitem open="1" type="829" id="vqEiarIIhiet"/>
      <listitem open="1" type="829" id="QQS9YxtpVQIR"/>
      <listitem open="1" type="829" id="bDKZWgmQX087"/>
      <listitem open="1" type="829" id="rONW61PUQqdy"/>
      <listitem open="1" type="829" id="nUlHu1iWE03l"/>
      <listitem open="1" type="829" id="U19uHbFWXh7z"/>
      <listitem open="1" type="829" id="l3jx3nikartM"/>
      <listitem open="1" type="829" id="gaMZl3yElLA5"/>
      <listitem open="1" type="829" id="9Aznn4XOZkRs"/>
      <listitem open="1" type="829" id="ZzyBrmTKndE2"/>
      <listitem open="1" type="829" id="Y2Rh3PxPW28X"/>
      <listitem open="1" type="829" id="iT9GJ3cQDbDy"/>
      <listitem open="1" type="829" id="bOzw6KBpOvnR"/>
      <listitem open="1" type="829" id="eiNDTm42B3yF"/>
      <listitem open="1" type="829" id="L75j2s9iLIze"/>
      <listitem open="1" type="829" id="JZ4U9FTnyo0P"/>
      <listitem open="1" type="829" id="An3dx0U9MZWs"/>
      <listitem open="0" type="829" id="G5K0PjaxfQ3k"/>
      <listitem open="1" type="829" id="uHFDYCsrkuMt"/>
      <listitem open="1" type="829" id="gpBBnHGdgd7k"/>
      <listitem open="1" type="829" id="dVF3Lsz6LkNF"/>
     </listitem>
    </listitem>
    <listitem open="1" type="802" id="Use Case View"/>
    <listitem open="1" type="821" id="Component View"/>
    <listitem open="1" type="827" id="Deployment View"/>
    <listitem open="1" type="836" id="Entity Relationship Model"/>
   </listitem>
  </listview>
  <codegeneration>
   <codegenerator language="MySQL">
    <sourcecode value=":&#xa;casco.__init__(self)&#xa;self.dic=DicionarioDerivada&#xa;" id="md8liBfMqPWy"/>
    <sourcecode value=":&#xa;Muda a velocidade do casco&#xa;self.vel=Velocidade.copy()&#xa;self.vel[0]=self.vel[0]-self.dic['unom']&#xa;" id="mwerj97B134v"/>
    <sourcecode value=":&#xa;Forcas em surge&#xa;u=self.MostraVel()[0]&#xa;v=self.MostraVel()[1]&#xa;r=self.MostraVel()[5]&#xa;X=(self.dic['rho']/2)*(self.dic['lpp']**4)*(self.dic['xrr']*r**2)+(self.dic['rho']/2)*(self.dic['lpp']**3)*(self.dic['xvr']*v*r)+(self.dic['rho']/2)*(self.dic['lpp']**2)*(self.dic['xvv']*v**2)&#xa;return X&#xa;" id="Ok7RuJyozCTY"/>
    <sourcecode value=":&#xa;Forcas de sway&#xa;u=self.MostraVel()[0]&#xa;v=self.MostraVel()[1]&#xa;r=self.MostraVel()[5]&#xa;Y=(self.dic['rho']/2)*(self.dic['lpp']**4)*(self.dic['yr|r|']*r*abs(r))+(self.dic['rho']/2)*(self.dic['lpp']**3)*(self.dic['yr']*u*r+self.dic['yv|r|']*v*abs(r))+(self.dic['rho']/2)*(self.dic['lpp']**2)*(self.dic['yv']*v*u+self.dic['yv|v|']*v*abs(v))&#xa;return Y&#xa;" id="uMzHULycWc95"/>
    <sourcecode value=":&#xa;Momento de roll&#xa;return sp.array([0.])&#xa;" id="5bprEoBKdKXH"/>
    <sourcecode value=":&#xa;Momento de yaw&#xa;u=self.MostraVel()[0]&#xa;v=self.MostraVel()[1]&#xa;r=self.MostraVel()[5]&#xa;N=(self.dic['rho']/2)*(self.dic['lpp']**5)*(self.dic['nr|r|']*r*abs(r))+(self.dic['rho']/2)*(self.dic['lpp']**4)*(self.dic['nr']*u*r+self.dic['n|v|r']*r*abs(v))+(self.dic['rho']/2)*(self.dic['lpp']**3)*(self.dic['nv']*v*u+self.dic['nv|v|']*v*abs(v))&#xa;return N" id="8VnPgEzlE4ps"/>
    <sourcecode value=":&#xa;Construtor do casco&#xa;__________________________&#xa;Variáveis de entrada:&#xa;  DicionarioDerivadas(string)--Dicionário com os coeficientes do casco e outros dados&#xa;  ___________________________&#xa;  Obs:&#xa;    para o DicionarioDerivadas deve se utilizar a classe entrada e a função lerarqder&#xa;    casco.__init__(self)&#xa;    self.dic=DicionarioDerivadas&#xa;&#xa;  def MudaVel(self,Velocidade):&#xa;    Muda a velocidade da embarcação&#xa;    __________________________&#xa;    Variáveis de entrada:&#xa;      Velocidade--array de velocidades&#xa;      vel=Velocidade.copy()&#xa;      self.V=sp.sqrt(vel[0]**2+vel[1]**2)&#xa;      vel[0]=vel[0]-self.dic['unom']&#xa;      vel[:3]=vel[:3]/self.V&#xa;      vel[3:]=vel[3:]*self.dic['lpp']/self.V&#xa;      self.vel=vel&#xa;&#xa;    def MudaPos(self,Posicao):&#xa;      Muda a posição e orientação do casco&#xa;      __________________________&#xa;      Variáveis de entrada:&#xa;        Posicao--posição&#xa;        pos=Posicao.copy()&#xa;        pos[:3]=pos[:3]/self.dic['lpp']&#xa;        self.pos=pos&#xa;&#xa;      def filtrar(self,eixo):&#xa;        Recebe o dicionário dic com valores como:&#xa;          'xvr'=54,...&#xa;        e testa se&#xa;        todos os valores da lita lista=['yur','rtu',...]estam em dic caso não estejam devolve a&#xa;        resposta na lista outofdic e caso os valores não sejam float devolve em notfloat&#xa;        outofdic=[]&#xa;        if eixo.lower()=='x':&#xa;          lista=list(self.listafx)&#xa;&#xa;        elif eixo.lower()=='y':&#xa;          lista=list(self.listafy)&#xa;&#xa;        elif eixo.lower()=='k':&#xa;          lista=list(self.listamk)&#xa;&#xa;        elif eixo.lower()=='n':&#xa;          lista=list(self.listamn)&#xa;&#xa;        for arg in lista:&#xa;          if arg not in self.dic:&#xa;            outofdic.append(arg)&#xa;&#xa;&#xa;        return outofdic&#xa;&#xa;      def gz(self):&#xa;        Calcula a função Gz&#xa;        bm=self.dic['km']-self.dic['kb']&#xa;        return(self.dic['gm']+bm*0.5*sp.tan(self.pos[3])**2)*sp.sin(self.pos[3])/self.dic['lpp']&#xa;&#xa;      def Fx(self):&#xa;        Forças em surge&#xa;        ua=self.vel[0]&#xa;        v=self.vel[1]&#xa;        p=self.vel[3]&#xa;        r=self.vel[5]&#xa;        X=self.dic['xu']*ua+self.dic['xuu']*ua*ua+self.dic['xuuu']*(ua**3)+self.dic['xvr']*v*r+self.dic['xrr']*(r**2)+self.dic['xv']*v+self.dic['xvv']*(v**2)+self.dic['xvroll']*v*self.pos[3]+self.dic['xroll']*self.pos[3]+self.dic['xrroll']*(self.pos[3]**2)+self.dic['xpp']*p**2+self.dic['xppu']*(p**2)*ua&#xa;        return X*((self.dic['rho']*(self.V*self.dic['lpp'])**2)/2)&#xa;&#xa;      def Fy(self):&#xa;        Forcas em sway&#xa;        ua=self.vel[0]&#xa;        v=self.vel[1]&#xa;        p=self.vel[3]&#xa;        r=self.vel[5]&#xa;        Y=self.dic['yv']*v+self.dic['yvv']*(v**2)+self.dic['yv|v|']*v*abs(v)+self.dic['yv|r|']*v*abs(r)+self.dic['yvrr']*v*(r**2)+self.dic['yr']*r+self.dic['yr|r|']*r*abs(r)+self.dic['yrrr']*(r**3)++self.dic['yr|v|']*r*abs(v)+self.dic['yrvv']*r*(v**2)+self.dic['yp']*p+self.dic['yppp']*(p**3)+self.dic['ypu']*p*ua+self.dic['ypu|pu|']*p*ua*abs(p*ua)+self.dic['yroll']*self.pos[3]+self.dic['yvroll']*v*self.pos[3]+self.dic['yvrroll']*v*(self.pos[3]**2)+self.dic['yrollvv']*self.pos[3]*(v**2)+self.dic['y0']+self.dic['y0u']*ua&#xa;        return Y*((self.dic['rho']*(self.V*self.dic['lpp'])**2)/2)&#xa;&#xa;      def K(self):&#xa;        Momento de roll&#xa;        ua=self.vel[0]&#xa;        v=self.vel[1]&#xa;        p=self.vel[3]&#xa;        r=self.vel[5]&#xa;        K=self.dic['kv']*v+self.dic['kvv']*(v**2)+self.dic['kv|v|']*v*abs(v)+self.dic['kv|r|']*v*abs(r)+self.dic['kvrr']*v*(r**2)+self.dic['kr|r|']*r*abs(r)+self.dic['krrr']*(r**3)+self.dic['krvv']*r*(v**2)+self.dic['kr|v|']*r*abs(v)+self.dic['kp']*p+self.dic['kp|p|']*p*abs(p)+self.dic['kppp']*(p**3)+self.dic['kpu']*p*ua+self.dic['kpu|pu|']*abs(p*ua)*p*ua+self.dic['kvroll']*v*self.pos[3]+self.dic['kvrroll']*v*self.pos[3]**2+self.dic['krollvv']*self.pos[3]*v**2+self.dic['k0']+self.dic['k0u']*ua+self.dic['kr']*r-(self.dic['g']*self.dic['deslo']*self.gz())/(((self.V*self.dic['lpp'])**2)/2)&#xa;        return K*(self.dic['rho']*(self.V**2)*(self.dic['lpp']**3)/2)&#xa;&#xa;      def N(self):&#xa;        Momento de yaw&#xa;        ua=self.vel[0]&#xa;        v=self.vel[1]&#xa;        p=self.vel[3]&#xa;        r=self.vel[5]&#xa;        N=self.dic['nv']*v+self.dic['nvv']*v**2+self.dic['nv|v|']*v*abs(v)+self.dic['nv|r|']*v*abs(r)+self.dic['nvrr']*v*r**2+self.dic['nr']*r+self.dic['nr|r|']*r*abs(r)+self.dic['nrrr']*r**3+self.dic['nrvv']*r*v**2+self.dic['nr|v|']*r*abs(v)+self.dic['np']*p+self.dic['nppp']*p**3+self.dic['npu']*p*ua+self.dic['npu|pu|']*p*ua*abs(p*ua)+self.dic['nroll']*self.pos[3]+self.dic['nvroll']*v*self.pos[3]+self.dic['nvrroll']*v*self.pos[3]**2+self.dic['nrollvv']*self.pos[3]*v**2+self.dic['n0']+self.dic['n0u']*ua&#xa;        return N*(self.dic['rho']*(self.V**2)*(self.dic['lpp']**3)/2)" id="f0shHyNcjT9w"/>
    <sourcecode value=":&#xa;Construtor do cacso&#xa;__________________________&#xa;self.vel=sp.zeros((6,1))&#xa;self.pos=sp.zeros((6,1))&#xa;" id="y1YnZ5K8MX5C"/>
    <sourcecode value=":&#xa;Mostra a Velocidade do casco&#xa;return self.vel&#xa;" id="KpIhNLt6SRkG"/>
    <sourcecode value=":&#xa;Mostra a posição do casco&#xa;return self.pos&#xa;" id="vQxLrgZyTMCa"/>
    <sourcecode value=":&#xa;Muda a velocidade do casco&#xa;self.vel=Velocidade&#xa;" id="HWaltmJ9um72"/>
    <sourcecode value=":&#xa;Muda a posição do casco&#xa;self.pos=Posicao&#xa;" id="Ctw1oGX7Ej9n"/>
    <sourcecode value=":&#xa;Retorna um sp.array de massa adicional&#xa;saida=None&#xa;if GrausDeLib==4:&#xa;  saida=sp.array([[self.dic['xdotu'],0,0,0],[0,self.dic['ydotv'],self.dic['ydotp'],self.dic['ydotr']],[0,self.dic['kdotv'],self.dic['kdotp'],self.dic['kdotr']],[0,self.dic['ndotv'],self.dic['ndotp'],self.dic['ndotr']]])&#xa;  saida[:2,:2]=saida[:2,:2]*(self.dic['rho']*(self.dic['lpp']**3))/2&#xa;  saida[2:,:2]=saida[2:,:2]*(self.dic['rho']*(self.dic['lpp']**4))/2&#xa;  saida[:2,2:]=saida[:2,2:]*(self.dic['rho']*(self.dic['lpp']**4))/2&#xa;  saida[2:,2:]=saida[2:,2:]*(self.dic['rho']*(self.dic['lpp']**5))/2&#xa;&#xa;elif GrausDeLib==3:&#xa;  saida=sp.array([[self.dic['xdotu'],0,0],[0,self.dic['ydotv'],self.dic['ydotr']],[0,self.dic['ndotv'],self.dic['ndotr']]])&#xa;  saida[:2,:2]=saida[:2,:2]*(self.dic['rho']*(self.dic['lpp']**3))/2&#xa;  saida[1,2]=saida[1,2]*(self.dic['rho']*(self.dic['lpp']**4))/2&#xa;  saida[2,1]=saida[2,1]*(self.dic['rho']*(self.dic['lpp']**4))/2&#xa;  saida[2,2]=saida[2,2]*(self.dic['rho']*(self.dic['lpp']**5))/2&#xa;&#xa;return saida&#xa;" id="40U9gFs6p9lx"/>
    <sourcecode value=":&#xa;Retorna um sp.array de massa e massa adicional&#xa;saida=None&#xa;if GrausDeLib==4:&#xa;  saida=sp.array([[self.dic['m'],0.,0.,0.],&#xa;  [0.,self.dic['m'],-(self.dic['m']*self.dic['zg']/self.dic['lpp']),self.dic['m']*self.dic['xg']/self.dic['lpp']],&#xa;  [0.,-(self.dic['m']*self.dic['zg']/self.dic['lpp']),self.dic['ixx'],0.],&#xa;  [0.,self.dic['m']*self.dic['xg']/self.dic['lpp'],0.,self.dic['izz']]])&#xa;  saida[:2,:2]=saida[:2,:2]*(self.dic['rho']*(self.dic['lpp']**3))/2&#xa;  saida[2:,:2]=saida[2:,:2]*(self.dic['rho']*(self.dic['lpp']**4))/2&#xa;  saida[:2,2:]=saida[:2,2:]*(self.dic['rho']*(self.dic['lpp']**4))/2&#xa;  saida[2:,2:]=saida[2:,2:]*(self.dic['rho']*(self.dic['lpp']**5))/2&#xa;&#xa;elif GrausDeLib==3:&#xa;  saida=sp.array([[self.dic['m'],0.,0.],&#xa;  [0.,self.dic['m'],self.dic['m']*self.dic['xg']/self.dic['lpp']],&#xa;  [0.,self.dic['m']*self.dic['xg']/self.dic['lpp'],self.dic['izz']]])&#xa;  saida[:2,:2]=saida[:2,:2]*(self.dic['rho']*(self.dic['lpp']**3))/2&#xa;  saida[1,2]=saida[1,2]*(self.dic['rho']*(self.dic['lpp']**4))/2&#xa;  saida[2,1]=saida[2,1]*(self.dic['rho']*(self.dic['lpp']**4))/2&#xa;  saida[2,2]=saida[2,2]*(self.dic['rho']*(self.dic['lpp']**5))/2&#xa;&#xa;return saida&#xa;" id="gMqAcRDjHhSw"/>
    <sourcecode value=":&#xa;Devolve a força em surge&#xa;" id="hxXrmmqUml1m"/>
    <sourcecode value=":&#xa;Devolve a força em sway&#xa;" id="HLA14AlXLB5V"/>
    <sourcecode value=":&#xa;Devolve o momento de roll&#xa;" id="ql4Bw7fJOhrH"/>
    <sourcecode value=":&#xa;Devolve o momento de yaw" id="xBlJsaapq8p9"/>
    <sourcecode value=":&#xa;Inicialisador da classe Entrada&#xa;______________________________&#xa;entrada-Tupla com 3 argumentos&#xa;entrada[0]-Nome do navio.Tipo string--Default='Navioteste'&#xa;entrada[1]-Nome do arquivo de entrada contendo as derivadas hidrodinâmicas.&#xa;Tipo string--Default='inputder.dat'&#xa;entrada[2]-Nome do arquivo de entrada contendo o valor das forças tabeladas.&#xa;Tipo string--Default='inputtab.dat'&#xa;Dica--Caso queira saber como é a forma do arquivo entrada[1]utilize o comando&#xa;self.gerartempder([nome,valor])&#xa;@return:&#xa;  @author&#xa;  self.nomenavio1=entrada[0]&#xa;  self.arqder=entrada[1]&#xa;  self.arqtab=entrada[2]&#xa;  self.bdder=''&#xa;  self.bdtab=''&#xa;  self.log=''&#xa;  self.listafx=['xdotu','xu','xuu','xuuu','xvr','xrr','xv','xvv','xvroll','xroll','xrroll','xpp','xpp','xppu']&#xa;  self.listafy=['ydotv','ydotr','ydotp','yv','yvv','yv|v|','yv|r|','yrvv','yp','yppp','ypu','ypu|pu|','yroll','yvroll','yvrroll','yrollvv','y0','y0u']&#xa;  self.listamk=['kdotp','kdotv','kdotr','kv','kvv','kv|v|','kv|r|','kvrr','kr|r|','krrr','krvv','kr|v|','kp','kp|p|','kppp','kpu','kpu|pu|','kv','kvroll','kvrroll','krollvv','k0','k0u','kr','deslo','rho','g']&#xa;  self.listamn=['ndotv','ndotr','ndotp','nv','nvv','nv|v|','nv|r|','nvrr','nr','nr|r|','nrrr','nrvv','nr|v|','np','nppp','npu','npu|pu|','nroll','nvroll','nvrroll','nrollvv','n0','n0u']&#xa;&#xa;def listararq(self,separator=','):&#xa;  ''';Função não utilisada na versão 191010&#xa;  Lê o arquivo'self.arqder'e devolve uma lista com todas as letras&#xa;  minusculas sem&quot;enter&quot;e sem espaco separada pela marcacao do separador.&#xa;  A intencao e receber um arquico assim:&#xa;    self.file:&#xa;      xu=10,Xv=13,yv=14,&#xa;      ydelta=2.0,k=40&#xa;      apos o seguinte comando&#xa;      >>>listararq(',')&#xa;      ['xu=10','xv=13','yv=14','ydelta=2.0','k=40']&#xa;      ''';f=file(self.arqder,'r')&#xa;      output=[]&#xa;      for line in f:&#xa;        if';line=line.replace(line[line.index('line=line.replace(' ','')&#xa;        line=line.replace('\n','')&#xa;        line=line.replace('\t','')&#xa;        output.extend(line.split(separator))&#xa;&#xa;      while''in output:&#xa;        output.remove('')&#xa;&#xa;      return output&#xa;&#xa;    def checkformat(self):&#xa;      ''';Verifica se os dados do arquivo entrada[0]estam corretos.&#xa;      Retorna uma lista dos valores formatados errados do tipo:&#xa;        erro=[xu,...]&#xa;        Motivos de erro mais de 1'.'ou'-'ou valores alfanuméricos&#xa;        (exeto a numeros em notação científica como 10e5)&#xa;        ''';lista=self.listararq()&#xa;        erro=[]&#xa;        for arg in lista:&#xa;          arg=arg.partition('=')&#xa;          a=arg[2].replace('.','')&#xa;          a=a.replace('-','')&#xa;          if not((arg[2].count('-')&lt;2)and&#xa;          (arg[2].count('.')&lt;2)and(a.isdigit()or('e'in a.lower()))and len(arg)==3):&#xa;            erro.append(arg[0])&#xa;&#xa;&#xa;        return erro&#xa;&#xa;      def lerbdtab(self):&#xa;        Lê o banco de dados com os valores de força tabelados&#xa;        Ainda não implementado na versão 191010&#xa;        pass&#xa;&#xa;      def lerarqder(self,separator=',',comment=';Lê o arquivo entrada[1]contendo as derivadas hidrodinâmicas e caracteríticas do navio Devolve um dicionário de sp.array com os valores possuindo como chaves o nome das variáveis em letra minúscula.__________________________ Variáveis de entrada _________________________ separator--Separador do nome da variável eo o valor.Tipo string.Default--' ,'comment--Indicativo de linha para comentário.Tipo string.Default--'f=file(self.arqder,'r')temp=[]for line in f:&#xa;        if comment in line:&#xa;          line=line.replace(line[line.index(comment):-1],'')&#xa;&#xa;        line=line.replace(' ','')&#xa;        line=line.replace('\n','')&#xa;        line=line.replace('\t','')&#xa;        line=line.lower()&#xa;        temp.extend(line.split(separator))&#xa;&#xa;      while''in temp:&#xa;        temp.remove('')&#xa;&#xa;      output=:&#xa;&#xa;&#xa;      for i in range(len(temp)):&#xa;        temp[i]=temp[i].partition('=')&#xa;        output[temp[i][0]]=sp.array(float(temp[i][2]))&#xa;&#xa;      return dict(output)&#xa;      def lerarqtab(self):&#xa;        Ainda não implementado na versão 191010&#xa;        Lê arquivo de forças tabeladas entrada[2]e devolve um sp.array([betta,forcas])&#xa;        pass&#xa;&#xa;      def lerbdder(self):&#xa;        Ainda não implementado na versão 191010&#xa;        Lê banco de dados de derivadas hidrodinâmicas.&#xa;        pass&#xa;&#xa;      def gerartempder(self,nome='inputder.dat',valor=' &lt;valor>,'):&#xa;        Gera um template para o arquivo de derivadas hidrodinâmicas.&#xa;        __________________________&#xa;        Variáveis de entrada&#xa;        _________________________&#xa;        nome=nome do arquivo de saída.Tipo string.&#xa;        Default-inputder.dat&#xa;        valor=preenchimento do valor das derivadas.&#xa;        Tipo string.Default-&lt;valor>&#xa;        f=open(nome,'w')&#xa;        f.write(';f.write(';f.write(';f.write('\n \n')&#xa;        f.write(';cont=0&#xa;        for arg in self.listaderfx:&#xa;          impre=arg.ljust(8)+'='+valor&#xa;          f.write(impre.ljust(30),)&#xa;          cont+=1&#xa;          if cont==4:&#xa;            f.write('\n')&#xa;            cont=0&#xa;&#xa;&#xa;        f.write('\n \n')&#xa;        f.write(';cont=0&#xa;        for arg in self.listaderfy:&#xa;          impre=arg.ljust(8)+'='+valor&#xa;          f.write(impre.ljust(30),)&#xa;          cont+=1&#xa;          if cont==4:&#xa;            f.write('\n')&#xa;            cont=0&#xa;&#xa;&#xa;        f.write('\n \n')&#xa;        f.write(';cont=0&#xa;        for arg in self.listaderk:&#xa;          impre=arg.ljust(8)+'='+valor&#xa;          f.write(impre.ljust(30),)&#xa;          cont+=1&#xa;          if cont==4:&#xa;            f.write('\n')&#xa;            cont=0&#xa;&#xa;&#xa;        f.write('\n \n')&#xa;        f.write(';cont=0&#xa;        for arg in self.listadern:&#xa;          impre=arg.ljust(8)+'='+valor&#xa;          f.write(impre.ljust(30),)&#xa;          cont+=1&#xa;          if cont==4:&#xa;            f.write('\n')&#xa;            cont=0&#xa;&#xa;&#xa;        f.close()&#xa;&#xa;      def fxdertotab(self,intervalo=5):&#xa;        Transforma os valores de derivadas hidrodinâmicas em entrada[1]&#xa;        para uma tabela de forças em surge do tipo sp.array.&#xa;        É necessário carregar um arquivo de derivadas em entrada[1].&#xa;        __________________________&#xa;        Variáveis de entrada&#xa;        _________________________&#xa;        Intervalo=intervalo do ângulo beta em graus&#xa;        Default=5.&#xa;        __________________________&#xa;        Saída&#xa;        _________________________&#xa;        Saida é um sp.array[beta,Fx]):&#xa;          Beta-Ângulo de ataque&#xa;          Fx=Forças em Surge&#xa;          DicionarioDerivadas=self.lerarqder()&#xa;          navio1=navio(DicionarioDerivadas,Nome='Teste',Tipo='TP')&#xa;          saida=sp.zeros([len(sp.arange(0.,sp.pi,intervalo*sp.pi/180)),2])&#xa;          Posicao=sp.zeros((6,1))&#xa;          Velocidade=sp.zeros((6,1))&#xa;          Leme=sp.array(0.)&#xa;          navio1.MudaVel(Velocidade)&#xa;          navio1.MudaPos(Posicao)&#xa;          navio1.MudaLeme(Leme)&#xa;          contlinha=0&#xa;          for beta in sp.arange(0.,sp.pi,intervalo*sp.pi/180):&#xa;            Velocidade[0]=sp.array([12.7])*sp.cos(beta)&#xa;            Velocidade[1]=-sp.array([12.7])*sp.sin(beta)&#xa;            navio1.MudaVel(Velocidade)&#xa;            saida[contlinha]=sp.array([beta*180/sp.pi,navio1.CalcFx()])&#xa;            contlinha+=1&#xa;&#xa;          return saida&#xa;&#xa;        def fydertotab(self,intervalo=5.):&#xa;          Transforma os valores de derivadas hidrodinâmicas em entrada[1]&#xa;          para uma tabela de forças em sway do tipo sp.array.&#xa;          É necessário carregar um arquivo de derivadas em entrada[1].&#xa;          __________________________&#xa;          Variáveis de entrada&#xa;          _________________________&#xa;          Intervalo=intervalo do ângulo beta em graus&#xa;          Default=5.&#xa;          __________________________&#xa;          Saída&#xa;          _________________________&#xa;          Saida é um sp.array[beta,Fx]):&#xa;            Beta-Ângulo de ataque&#xa;            Fy=Forças em Sway.&#xa;            DicionarioDerivadas=self.lerarqder()&#xa;            navio1=navio(DicionarioDerivadas,Nome='Teste',Tipo='TP')&#xa;            saida=sp.zeros([len(sp.arange(0.,sp.pi,intervalo*sp.pi/180)),2])&#xa;            Posicao=sp.zeros((6,1))&#xa;            Velocidade=sp.zeros((6,1))&#xa;            Leme=sp.array(0.)&#xa;            navio1.MudaVel(Velocidade)&#xa;            navio1.MudaPos(Posicao)&#xa;            navio1.MudaLeme(Leme)&#xa;            contlinha=0&#xa;            for beta in sp.arange(0.,sp.pi,intervalo*sp.pi/180):&#xa;              Velocidade[0]=sp.array([12.7])*sp.cos(beta)&#xa;              Velocidade[1]=-sp.array([12.7])*sp.sin(beta)&#xa;              navio1.MudaVel(Velocidade)&#xa;              saida[contlinha]=sp.array([beta*180/sp.pi,navio1.CalcFy()])&#xa;              contlinha+=1&#xa;&#xa;            return saida&#xa;&#xa;          def kdertotab(self,intervalo=5):&#xa;            Transforma os valores de derivadas hidrodinâmicas em entrada[1]&#xa;            para uma tabela de Momento de roll do tipo sp.array.&#xa;            __________________________&#xa;            Variáveis de entrada&#xa;            _________________________&#xa;            Intervalo=intervalo do ângulo beta em graus&#xa;            Default=5.&#xa;            É necessário carregar um arquivo de derivadas em entrada[1].&#xa;            __________________________&#xa;            Saída&#xa;            _________________________&#xa;            Saida é um sp.array[beta,Fx]):&#xa;              Beta-Ângulo de ataque&#xa;              K=Momento de roll.&#xa;              &quot;    ;DicionarioDerivadas=self.lerarqder()&#xa;              navio1=navio(DicionarioDerivadas,Nome='Teste',Tipo='TP')&#xa;              saida=sp.zeros([len(sp.arange(0.,sp.pi,intervalo*sp.pi/180)),2])&#xa;              Posicao=sp.zeros((6,1))&#xa;              Velocidade=sp.zeros((6,1))&#xa;              Leme=sp.array(0.)&#xa;              navio1.MudaVel(Velocidade)&#xa;              navio1.MudaPos(Posicao)&#xa;              navio1.MudaLeme(Leme)&#xa;              contlinha=0&#xa;              for beta in sp.arange(0.,sp.pi,intervalo*sp.pi/180):&#xa;                Velocidade[0]=sp.array([12.7])*sp.cos(beta)&#xa;                Velocidade[1]=-sp.array([12.7])*sp.sin(beta)&#xa;                navio1.MudaVel(Velocidade)&#xa;                saida[contlinha]=sp.array([beta*180/sp.pi,navio1.CalcK()])&#xa;                contlinha+=1&#xa;&#xa;              return saida&#xa;&#xa;            def ndertotab(self,intervalo=5):&#xa;              Transforma os valores de derivadas hidrodinâmicas em entrada[1]&#xa;              para uma tabela de Momento de yaw do tipo sp.array.&#xa;              É necessário carregar um arquivo de derivadas em entrada[1].&#xa;              __________________________&#xa;              Variáveis de entrada&#xa;              _________________________&#xa;              Intervalo=intervalo do ângulo beta em graus&#xa;              Default=5.&#xa;              __________________________&#xa;              Saída&#xa;              _________________________&#xa;              Saida é um sp.array[beta,Fx]):&#xa;                Beta-Ângulo de ataque&#xa;                N=Momento de yaw.&#xa;                &quot;     ;DicionarioDerivadas=self.lerarqder()&#xa;                navio1=navio(DicionarioDerivadas,Nome='Teste',Tipo='TP')&#xa;                saida=sp.zeros([len(sp.arange(0.,sp.pi,intervalo*sp.pi/180)),2])&#xa;                Posicao=sp.zeros((6,1))&#xa;                Velocidade=sp.zeros((6,1))&#xa;                Leme=sp.array(0.)&#xa;                navio1.MudaVel(Velocidade)&#xa;                navio1.MudaPos(Posicao)&#xa;                navio1.MudaLeme(Leme)&#xa;                contlinha=0&#xa;                for beta in sp.arange(0.,sp.pi,intervalo*sp.pi/180):&#xa;                  Velocidade[0]=sp.array([12.7])*sp.cos(beta)&#xa;                  Velocidade[1]=-sp.array([12.7])*sp.sin(beta)&#xa;                  navio1.MudaVel(Velocidade)&#xa;                  saida[contlinha]=sp.array([beta*180/sp.pi,navio1.CalcN()])&#xa;                  contlinha+=1&#xa;&#xa;                return saida&#xa;&#xa;              def plotfxb(self,intervalo=5.,save=True,formato='eps'):&#xa;                Plota o gráfico de forças em surge contra beta&#xa;                __________________________&#xa;                Variáveis de entrada:&#xa;                  Intervalo(Float)--intervalo do ângulo beta em graus.Default=5.&#xa;&#xa;                  save(True/False)--Opção para salvar as figuras ou somente mostrar os gráficos,utilizar somente True até o momento&#xa;&#xa;                  formato('png'/'pdf'/'ps'/'eps'/'svg')--formatos de saída da figura&#xa;&#xa;                  _________________________&#xa;                  É necessário carregar um arquivo de derivadas em entrada[1]&#xa;&#xa;                  Salva as figuras no diretório'./figuras/tab/;plt.plot(self.fxdertotab(intervalo)[0:,0]*(180/sp.pi),self.fxdertotab(intervalo)[0:,1],'r--')&#xa;                  plt.ylabel(r'$F_x$')&#xa;                  plt.xlabel(r'$\beta$')&#xa;                  plt.title(r'$F_x \quad X \quad \beta$')&#xa;                  if save:&#xa;                    plt.savefig('./figuras/tab/pltfxb',format=formato)&#xa;                    plt.clf()&#xa;&#xa;                  else:&#xa;                    plt.show()&#xa;                    plt.clf()&#xa;&#xa;&#xa;                def plotfyb(self,intervalo=5.,save=True,formato='eps'):&#xa;                  Plota o gráfico de forças em sway contra beta&#xa;                  __________________________&#xa;                  Variáveis de entrada:&#xa;                    Intervalo(Float)--intervalo do ângulo beta em graus.Default=5.&#xa;&#xa;                    save(True/False)--Opção para salvar as figuras ou somente mostrar os gráficos,utilizar somente True até o momento&#xa;&#xa;                    formato('png'/'pdf'/'ps'/'eps'/'svg')--formatos de saída da figura&#xa;&#xa;                    _________________________&#xa;                    É necessário carregar um arquivo de derivadas em entrada[1]&#xa;&#xa;                    Salva as figuras no diretório'./figuras/tab/;plt.plot(self.fydertotab(intervalo)[0:,0]*(180/sp.pi),self.fydertotab(intervalo)[0:,1])&#xa;                    plt.ylabel(r'$F_y$')&#xa;                    plt.xlabel(r'$\beta$')&#xa;                    plt.title(r'$F_y$ x $\beta$')&#xa;                    if save:&#xa;                      plt.savefig('./figuras/tab/pltfyb',format=formato)&#xa;                      plt.clf()&#xa;&#xa;                    else:&#xa;                      plt.show()&#xa;                      plt.clf()&#xa;&#xa;&#xa;                  def plotkb(self,intervalo=5.,save=True,formato='eps'):&#xa;                    Plota o gráfico de momento de roll em surge contra beta&#xa;                    __________________________&#xa;                    Variáveis de entrada:&#xa;                      Intervalo(Float)--intervalo do ângulo beta em graus.Default=5.&#xa;&#xa;                      save(True/False)--Opção para salvar as figuras ou somente mostrar os gráficos,utilizar somente True até o momento&#xa;&#xa;                      formato('png'/'pdf'/'ps'/'eps'/'svg')--formatos de saída da figura&#xa;&#xa;                      _________________________&#xa;                      É necessário carregar um arquivo de derivadas em entrada[1]&#xa;&#xa;                      Salva as figuras no diretório'./figuras/tab/;plt.plot(self.kdertotab(intervalo)[0:,0]*(180/sp.pi),self.kdertotab()[0:,1])&#xa;                      plt.ylabel(r'$M_{\phi}$')&#xa;                      plt.xlabel(r'$\beta$')&#xa;                      plt.title(r'$M_{\phi}$ x $\beta$')&#xa;                      if save:&#xa;                        plt.savefig('./figuras/tab/pltkb',format=formato)&#xa;                        plt.clf()&#xa;&#xa;                      else:&#xa;                        plt.show()&#xa;                        plt.clf()&#xa;&#xa;&#xa;                    def plotnb(self,intervalo=5.,save=True,formato='eps'):&#xa;                      Plota o gráfico de momento de yaw em surge contra beta&#xa;                      __________________________&#xa;                      Variáveis de entrada:&#xa;                        Intervalo(Float)--intervalo do ângulo beta em graus.Default=5.&#xa;&#xa;                        save(True/False)--Opção para salvar as figuras ou somente mostrar os gráficos,utilizar somente True até o momento&#xa;&#xa;                        formato('png'/'pdf'/'ps'/'eps'/'svg')--formatos de saída da figura&#xa;&#xa;                        _________________________&#xa;                        É necessário carregar um arquivo de derivadas em entrada[1]&#xa;&#xa;                        Salva as figuras no diretório'./figuras/tab/;plt.plot(self.ndertotab(intervalo)[0:,0]*(180/sp.pi),self.ndertotab()[0:,1])&#xa;                        plt.ylabel(r'$M_{\psi}$')&#xa;                        plt.xlabel(r'$\beta$')&#xa;                        plt.title(r'$M_{\psi}$ x $\beta$')&#xa;                        if save:&#xa;                          plt.savefig('./figuras/tab/pltnb',format=formato)&#xa;                          plt.clf()&#xa;&#xa;                        else:&#xa;                          plt.show()&#xa;                          plt.clf()&#xa;&#xa;&#xa;                      def plotzz(self,save=True,formato='eps',passo=0.5,tmax=200,tini=0,metodo='euler',TipoModelo='TP',GrausDeLib=4):&#xa;                        Plota curva de ZigZag&#xa;                        ____________________&#xa;                        Variáveis de entrada:&#xa;                          save(True/False)--Opção para salvar as figuras ou somente mostrar os gráficos,utilizar somente True até o momento&#xa;&#xa;                          formato('png'/'pdf'/'ps'/'eps'/'svg')--formatos de saída da figura&#xa;&#xa;                          passo(float)--Paso de tempo da integração&#xa;&#xa;                          tmax(integer)--Tempo máximo&#xa;&#xa;                          tini(integer)--Tempo inicial&#xa;&#xa;                          metodo('euler')--Método de integração&#xa;&#xa;                          ____________________&#xa;                          Salva as figuras no diretório'./figuras/Curva_de_Giro/curva_de_giro'&#xa;                          &quot;        ;DicionarioDerivadas=self.lerarqder()&#xa;                          navio1=navio(DicionarioDerivadas,Nome='Teste',Tipo=TipoModelo)&#xa;                          a=navio1.simula(met=metodo,t=tmax,t0=tini,dt=passo,GrausDeLib=GrausDeLib)&#xa;                          plt.plot(a[0][:,0],a[0][:,1],'bo')&#xa;                          plt.ylabel(r'$u$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltut',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[0][:,0],a[0][:,2],'g^')&#xa;                          plt.ylabel(r'$v$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltvt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[0][:,0],a[0][:,6])&#xa;                          plt.ylabel(r'$\dot\psi$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltvelyawt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[0][:,0],a[0][:,4],'--')&#xa;                          plt.ylabel('$\dot\phi$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltvelrollt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[1][:,0],a[1][:,1],'--')&#xa;                          plt.ylabel(r'$x$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltxt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[1][:,0],a[1][:,2],'g^')&#xa;                          plt.ylabel(r'$y$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltyt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[1][:,0],a[1][:,6]*(180/sp.pi),'o-',a[5][:,0],a[5][:,1]*(180/sp.pi),'-.')&#xa;                          plt.ylabel(r'$\psi$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltyawt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[1][:,0],a[1][:,4],'o-')&#xa;                          plt.ylabel(r'$\phi$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltrollt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[2][:,0],a[2][:,1],'--')&#xa;                          plt.ylabel(r'$\dot u$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltdotut',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[2][:,0],a[2][:,2],'g^')&#xa;                          plt.ylabel(r'$\dot v$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltdotvt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[2][:,0],a[2][:,4]*(sp.array([180])/sp.pi))&#xa;                          plt.ylabel(r'$\dot r$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltdotrt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[2][:,0],a[2][:,3]*(sp.array([180])/sp.pi),'o-')&#xa;                          plt.ylabel(r'$\dot p$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltdotpt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[3][:,0],a[3][:,1],'--')&#xa;                          plt.ylabel(r'$F_x$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltforsurget',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[3][:,0],a[3][:,2],'g^')&#xa;                          plt.ylabel(r'$F_y$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltforswayt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[3][:,0],a[3][:,4],'o-')&#xa;                          plt.ylabel(r'$N$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltNt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[3][:,0],a[3][:,3],'o-')&#xa;                          plt.ylabel(r'$K$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltKt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[6][:,0],a[6][:,1],'o-')&#xa;                          plt.ylabel(r'$n$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltnVert',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[5][:,0],a[5][:,1]*(180/sp.pi),'-.')&#xa;                          plt.ylabel(r'$\delta_R$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('ZigZag10/10')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Zig_Zag/pltlemet',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                          plt.show()plt.clf()&#xa;                        def plotcg(self,save=True,tipoc='port',formato='eps',passo=0.5,tmax=200,tini=0,metodo='euler',TipoModelo='TP',GrausDeLib=4):&#xa;                          Plota curva de Giro&#xa;                          ____________________&#xa;                          Variáveis de entrada&#xa;                          save(True/False)--Opção para salvar as figuras ou somente mostrar os gráficos,utilizar somente True até o momento&#xa;&#xa;                          tipoc('port'/'starboard')--Opção para o tipo de curva de giro para bombordo o boreste&#xa;&#xa;                          formato('png'/'pdf'/'ps'/'eps'/'svg')--formatos de saída da figura&#xa;&#xa;                          passo(float)--Paso de tempo da integração&#xa;&#xa;                          tmax(integer)--Tempo máximo&#xa;&#xa;                          tini(integer)--Tempo inicial&#xa;&#xa;                          metodo('euler')--Método de integração&#xa;&#xa;                          ____________________&#xa;                          Salva as figuras no diretório'./figuras/Curva_de_Giro/curva_de_giro'&#xa;                          DicionarioDerivadas=self.lerarqder()&#xa;                          navio1=navio(DicionarioDerivadas,Nome='Teste',Tipo=TipoModelo)&#xa;                          if tipoc=='port':&#xa;                            tipoc='Curva_de_Giro_port'&#xa;&#xa;                          else:&#xa;                            tipoc='Curva_de_Giro_starboard'&#xa;&#xa;                          a=navio1.simula(met=metodo,t=tmax,t0=tini,dt=passo,tipo=tipoc,GrausDeLib=GrausDeLib)&#xa;                          plt.plot(a[1][:,2],a[1][:,1],'o')&#xa;                          plt.ylabel('X')&#xa;                          plt.xlabel('Y')&#xa;                          plt.title('Curva de Giro')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Curva_de_Giro/curva_de_giro',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[0][:,0],a[0][:,1],'bo')&#xa;                          plt.ylabel(r'$u$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('Curva de Giro')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Curva_de_Giro/pltut',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[0][:,0],a[0][:,2],'g^')&#xa;                          plt.ylabel(r'$v$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('Curva de Giro')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Curva_de_Giro/pltvt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[0][:,0],a[0][:,6]*(sp.array([180])/sp.pi))&#xa;                          plt.ylabel(r'$\dot\psi$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('Curva de Giro')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Curva_de_Giro/pltvelyawt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[0][:,0],a[0][:,4]*(sp.array([180])/sp.pi),'--')&#xa;                          plt.ylabel('$\dot\phi$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('Curva de Giro')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Curva_de_Giro/pltvelrollt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[1][:,0],a[1][:,1],'--')&#xa;                          plt.ylabel(r'$x$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('Curva de Giro')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Curva_de_Giro/pltxt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[1][:,0],a[1][:,2],'g^')&#xa;                          plt.ylabel(r'$y$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('Curva de Giro')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Curva_de_Giro/pltyt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[1][:,0],a[1][:,6]*(180/sp.pi),'o-',a[5][:,0],a[5][:,1]*(180/sp.pi),'-.')&#xa;                          plt.ylabel(r'$\psi$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('Curva de Giro')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Curva_de_Giro/pltyawt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[1][:,0],a[1][:,4]*(sp.array([180])/sp.pi),'o-')&#xa;                          plt.ylabel(r'$\phi$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('Curva de Giro')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Curva_de_Giro/pltrollt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[2][:,0],a[2][:,1],'--')&#xa;                          plt.ylabel(r'$\dot u$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('Curva de Giro')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Curva_de_Giro/pltdotut',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[2][:,0],a[2][:,2],'g^')&#xa;                          plt.ylabel(r'$\dot v$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('Curva de Giro')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Curva_de_Giro/pltdotvt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[2][:,0],a[2][:,4]*(sp.array([180])/sp.pi))&#xa;                          plt.ylabel(r'$\dot r$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('Curva de Giro')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Curva_de_Giro/pltdotrt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[2][:,0],a[2][:,3]*(sp.array([180])/sp.pi),'o-')&#xa;                          plt.ylabel(r'$\dot p$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('Curva de Giro')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Curva_de_Giro/pltdotpt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[3][:,0],a[3][:,1],'--')&#xa;                          plt.ylabel(r'$F_x$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('Curva de Giro')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Curva_de_Giro/pltforsurget',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[3][:,0],a[3][:,2],'g^')&#xa;                          plt.ylabel(r'$F_y$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('Curva de Giro')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Curva_de_Giro/pltforswayt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[3][:,0],a[3][:,4],'o-')&#xa;                          plt.ylabel(r'$N$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('Curva de Giro')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Curva_de_Giro/pltNt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;                          plt.plot(a[3][:,0],a[3][:,3],'o-')&#xa;                          plt.ylabel(r'$K$')&#xa;                          plt.xlabel(r'$t$')&#xa;                          plt.title('Curva de Giro')&#xa;                          if save:&#xa;                            plt.savefig('./figuras/Curva_de_Giro/pltKt',format=formato)&#xa;                            plt.clf()&#xa;&#xa;                          else:&#xa;                            plt.show()&#xa;                            plt.clf()&#xa;&#xa;&#xa;                        def setarqder(self,arq):&#xa;                          Entra com o caminho do arquivo de derivadas hidrodimâmicas.&#xa;                          @return:&#xa;                            @author&#xa;                            self.arqder=arq&#xa;                            pass&#xa;&#xa;                          def setarqtab(self,arq):&#xa;                            Entra com o caminho do arquivo de forças tabeladas.&#xa;                            Não implementado na versão 191010.&#xa;&#xa;                          @return:&#xa;                            @author&#xa;                            self.arqtab=arq&#xa;                            pass&#xa;&#xa;                          def setbd(self):&#xa;                            Entra com o caminho do banco de dados.&#xa;                            Não implementado na versão 191010.&#xa;                            @return:&#xa;                              @author&#xa;                              pass&#xa;&#xa;                            def conad(self,tipo='snae',var='beta',dic=:&#xa;&#xa;                            ,vel=sp.array(0),r=sp.array(0),p=sp.array(0)):&#xa;                              Retorna o coeficiente de adimencionalisação&#xa;                              _________________________&#xa;                              Variáveis de entrada&#xa;                              _________________________&#xa;                              Tipo='snae'ou'dmi'&#xa;&#xa;                              Default='snae'&#xa;                              __________________________&#xa;                              Saída&#xa;                              _________________________&#xa;                              Saida é um sp.array[beta,Fx]):&#xa;                                Beta-Ângulo de ataque&#xa;                                Fx=Forças em Surge&#xa;                                den=dic['rho']&#xa;                                L=dic['lpp']&#xa;                                B=dic['b']&#xa;                                T=(dic['df']+dic['da'])/2&#xa;                                saida=None&#xa;                                if tipo=='snae'or(tipo=='dmi'and(var=='beta'or var=='phi'or var=='betaphi')):&#xa;                                  saida=sp.array(0.5*den*(vel*L)**2)&#xa;&#xa;                                elif tipo=='dmi'and(var=='gamma'or var=='betagamma'or var=='gammaphi'):&#xa;                                  saida=sp.array(0.5*den*((vel+(r*L/2)**2)*L*T))&#xa;&#xa;                                elif tipo=='dmi'and var=='epsilon':&#xa;                                  saida=sp.array(0.5*den*((vel+(T**2+(B/2)**2)*(p))**2)*L*T)&#xa;&#xa;                                return saida&#xa;&#xa;                              def coefdertotab2(self,dic,forge='fx',intervalo=5,coef='betagamma',ConstAdOr='snae',ConstAdDes='dmi'):&#xa;                                Transforma os valores de derivadas hidrodinâmicas em entrada[1]&#xa;                                para uma tabela de forças em surge do tipo sp.array.&#xa;                                É necessário carregar um arquivo de derivadas em entrada[1].&#xa;                                __________________________&#xa;                                Variáveis de entrada&#xa;                                _________________________&#xa;                                Intervalo=intervalo do ângulo beta em graus&#xa;                                Default=5.&#xa;                                __________________________&#xa;                                Saída&#xa;                                _________________________&#xa;                                Saida é um sp.array[beta,Fx]):&#xa;                                  Beta-Ângulo de ataque&#xa;                                  Fx=Forças em Surge&#xa;                                  navio1=navio()&#xa;                                  navio1.dic=self.lerarqder()&#xa;                                  navio1.x=sp.array([[0.],[0.],[0.],[0.],[0.],[0.]])&#xa;                                  navio1.dotx=sp.array([[dic['unom']],[0.],[0.],[0.],[0.],[0.]])&#xa;                                  navio1.angleme=sp.array([0.])&#xa;                                  if'beta'in coef:&#xa;                                    maxint1=1.&#xa;&#xa;                                  else:&#xa;                                    maxint1=2.&#xa;&#xa;                                  saida=sp.zeros([len(sp.arange(0.,sp.pi/maxint1,intervalo*sp.pi/180))*len(sp.arange(0.,sp.pi/2.,intervalo*sp.pi/180)),3])&#xa;                                  contlinha=0&#xa;                                  for ang1 in sp.arange(0.,sp.pi/maxint1,intervalo*sp.pi/180):&#xa;                                    for ang2 in sp.arange(0.,sp.pi/2.,intervalo*sp.pi/180):&#xa;                                      if ConstAdOr=='snae':&#xa;                                        coeforpf=self.conad(tipo='snae',dic=dic,vel=dic['unom'])&#xa;                                        coeforpm=coeforpf*dic['lpp']&#xa;&#xa;                                      if'beta'in coef:&#xa;                                        u=dic['unom']*sp.cos(ang1)&#xa;                                        v=-dic['unom']*sp.sin(ang1)&#xa;                                        navio1.dotx[0]=u&#xa;                                        navio1.dotx[5]=v&#xa;                                        coefdes=self.conad(tipo='dmi',var='beta',dic=dic,vel=dic['unom'])&#xa;                                        if forge=='fx':&#xa;                                          f1=sp.array(navio1.calcforcx()*(coeforpf/coefdes))&#xa;&#xa;                                        elif forge=='fy':&#xa;                                          f1=sp.array(navio1.calcforcy()*(coeforpf/coefdes))&#xa;&#xa;                                        elif forge=='k':&#xa;                                          f1=sp.array(ang,navio1.calck()*(coeforpm/(coefdes*dic['lpp'])))&#xa;&#xa;                                        elif forge=='n':&#xa;                                          f1=sp.array(ang,navio1.calcn()*(coeforpm/(coefdes*dic['lpp'])))&#xa;&#xa;                                        navio1.dotx[0]=dic['unom']&#xa;                                        navio1.dotx[5]=0.&#xa;&#xa;                                      else:&#xa;                                        r=sp.tan(ang1)*2*dic['unom']/dic['lpp']&#xa;                                        navio1.dotx[5]=r&#xa;                                        coefdes=self.conad(tipo='dmi',var='gamma',dic=dic,vel=dic['unom'],r=navio1.dotx[5])&#xa;                                        if forge=='fx':&#xa;                                          f1=sp.array([ang,navio1.calcforcx()*(coeforpf/coefdes)])&#xa;&#xa;                                        elif forge=='fy':&#xa;                                          f1=sp.array([ang,navio1.calcforcy()*(coeforpf/coefdes)])&#xa;&#xa;                                        elif forge=='k':&#xa;                                          f1=sp.array([ang,navio1.calck()*(coeforpm/(coefdes*dic['lpp']))])&#xa;&#xa;                                        elif forge=='n':&#xa;                                          f1=sp.array([ang,navio1.calcn()*(coeforpm/(coefdes*dic['lpp']))])&#xa;&#xa;                                        navio1.dotx[5]=0.&#xa;                                        navio1.x[3]=ang2&#xa;                                        coefdes=self.conad(tipo='dmi',var='gamma',dic=dic,vel=dic['unom'],r=navio1.dotx[5])&#xa;                                        if forge=='fx':&#xa;                                          f2=sp.array([ang,navio1.calcforcx()*(coeforpf/coefdes)])&#xa;&#xa;                                        elif forge=='fy':&#xa;                                          f2=sp.array([ang,navio1.calcforcy()*(coeforpf/coefdes)])&#xa;&#xa;                                        elif forge=='k':&#xa;                                          f2=sp.array([ang,navio1.calck()*(coeforpm/(coefdes*dic['lpp']))])&#xa;&#xa;                                        elif forge=='n':&#xa;                                          f2=navio1.calcn()*(coeforpm/(coefdes*dic['lpp']))&#xa;&#xa;                                        navio1.dotx[5]=r&#xa;                                        navio1.x[3]=ang2&#xa;                                        if forge=='fx':&#xa;                                          saida[contlinha]=sp.array([ang1,and2,navio1.calcforcx()*(coeforpf/coefdes)-(f1+f2)])&#xa;&#xa;                                        elif forge=='fy':&#xa;                                          saida[contlinha]=sp.array([ang1,and2,navio1.calcforcy()*(coeforpf/coefdes)-(f1+f2)])&#xa;&#xa;                                        elif forge=='k':&#xa;                                          saida[contlinha]=sp.array([ang1,and2,navio1.calck()*(coeforpm/(coefdes*dic['lpp']))-(f1+f2)])&#xa;&#xa;                                        elif forge=='n':&#xa;                                          saida[contlinha]=sp.array([ang1,and2,navio1.calcn()*(coeforpm/(coefdes*dic['lpp']))-(f1+f2)])&#xa;&#xa;&#xa;                                      if'gamma'in coef:&#xa;                                        r=sp.tan(ang1)*2*dic['unom']/dic['lpp']&#xa;                                        navio1.dotx[5]=r&#xa;                                        coefdes=self.conad(tipo='dmi',var='gamma',dic=dic,vel=dic['unom'],r=navio1.dotx[5])&#xa;                                        if forge=='fx':&#xa;                                          f2=sp.array(navio1.calcforcx()*(coeforpf/coefdes))&#xa;&#xa;                                        elif forge=='fy':&#xa;                                          f2=sp.array(navio1.calcforcy()*(coeforpf/coefdes))&#xa;&#xa;                                        elif forge=='k':&#xa;                                          f2=sp.array(navio1.calck()*(coeforpm/(coefdes*dic['lpp'])))&#xa;&#xa;                                        elif forge=='n':&#xa;                                          f2=sp.array(navio1.calcn()*(coeforpm/(coefdes*dic['lpp'])))&#xa;&#xa;&#xa;                                      if'phi'in coef:&#xa;                                        navio1.x[3]=ang2&#xa;                                        coefdes=self.conad(tipo='dmi',var='gamma',dic=dic,vel=dic['unom'],r=navio1.dotx[5])&#xa;                                        if forge=='fx':&#xa;                                          f2=sp.array(navio1.calcforcx()*(coeforpf/coefdes))&#xa;&#xa;                                        elif forge=='fy':&#xa;                                          f2=sp.array(navio1.calcforcy()*(coeforpf/coefdes))&#xa;&#xa;                                        elif forge=='k':&#xa;                                          f2=sp.array(navio1.calck()*(coeforpm/(coefdes*dic['lpp'])))&#xa;&#xa;                                        elif forge=='n':&#xa;                                          f2=sp.array(navio1.calcn()*(coeforpm/(coefdes*dic['lpp'])))&#xa;&#xa;                                        navio1.dotx[0]=u&#xa;                                        navio1.dotx[5]=v&#xa;&#xa;                                      if forge=='fx':&#xa;                                        saida[contlinha]=sp.array([ang1,ang2,navio1.calcforcx()*(coeforpf/coefdes)-(f1+f2)])&#xa;&#xa;                                      elif forge=='fy':&#xa;                                        saida[contlinha]=sp.array([ang1,ang2,navio1.calcforcy()*(coeforpf/coefdes)-(f1+f2)])&#xa;&#xa;                                      elif forge=='k':&#xa;                                        saida[contlinha]=sp.array([ang1,ang2,navio1.calck()*(coeforpm/(coefdes*dic['lpp']))-(f1+f2)])&#xa;&#xa;                                      elif forge=='n':&#xa;                                        saida[contlinha]=sp.array([ang1,ang2,navio1.calcn()*(coeforpm/(coefdes*dic['lpp']))-(f1+f2)])&#xa;&#xa;&#xa;                                    contlinha+=1&#xa;&#xa;                                  return saida&#xa;&#xa;                                def coefdertotab(self,dic,forge='fx',intervalo=5,coef='beta',coef2='gamma',ConstAdOr='snae',ConstAdDes='dmi'):&#xa;                                  Transforma os valores de derivadas hidrodinâmicas em entrada[1]&#xa;                                  para uma tabela de forças em surge do tipo sp.array.&#xa;                                  É necessário carregar um arquivo de derivadas em entrada[1].&#xa;                                  __________________________&#xa;                                  Variáveis de entrada&#xa;                                  _________________________&#xa;                                  Intervalo=intervalo do ângulo beta em graus&#xa;                                  Default=5.&#xa;                                  __________________________&#xa;                                  Saída&#xa;                                  _________________________&#xa;                                  Saida é um sp.array[beta,Fx]):&#xa;                                    Beta-Ângulo de ataque&#xa;                                    Fx=Forças em Surge&#xa;                                    navio1=navio()&#xa;                                    navio1.dic=self.lerarqder()&#xa;                                    navio1.x=sp.array([[0.],[0.],[0.],[0.],[0.],[0.]])&#xa;                                    navio1.dotx=sp.array([[dic['unom']],[0.],[0.],[0.],[0.],[0.]])&#xa;                                    navio1.angleme=sp.array([0.])&#xa;                                    if coef=='beta':&#xa;                                      maxint=1.&#xa;&#xa;                                    else:&#xa;                                      maxint=2.&#xa;&#xa;                                    saida=sp.zeros([len(sp.arange(0.,sp.pi/maxint,intervalo*sp.pi/180)),2])&#xa;                                    contlinha=0&#xa;                                    for ang in sp.arange(0.,sp.pi/maxint,intervalo*sp.pi/180):&#xa;                                      if ConstAdOr=='snae':&#xa;                                        coeforpf=self.conad(tipo='snae',dic=dic,vel=dic['unom'])&#xa;                                        coeforpm=coeforpf*dic['lpp']&#xa;&#xa;                                      if coef=='beta':&#xa;                                        navio1.dotx[0]=dic['unom']*sp.cos(ang)&#xa;                                        navio1.dotx[1]=-dic['unom']*sp.sin(ang)&#xa;                                        coefdes=self.conad(tipo='dmi',var='beta',dic=dic,vel=dic['unom'])&#xa;&#xa;                                      elif coef=='gamma':&#xa;                                        navio1.dotx[5]=sp.tan(ang)*2*dic['unom']/dic['lpp']&#xa;                                        coefdes=self.conad(tipo='dmi',var='gamma',dic=dic,vel=dic['unom'],r=navio1.dotx[5])&#xa;&#xa;                                      elif coef=='epsilon':&#xa;                                        navio1.dotx[3]=sp.tan(ang)*dic['unom']/sp.sqrt((((dic['df']+dic['da'])/2)**2+(dic['b']/2)**2))&#xa;                                        coefdes=self.conad(tipo='dmi',var='epsilon',dic=dic,vel=dic['unom'],p=navio1.dotx[3])&#xa;&#xa;                                      elif coef=='phi':&#xa;                                        navio1.x[3]=ang&#xa;                                        coefdes=self.conad(tipo='dmi',var='phi',dic=dic,vel=dic['unom'])&#xa;&#xa;                                      if forge=='fx':&#xa;                                        saida[contlinha]=sp.array([ang,navio1.calcforcx()*(coeforpf/coefdes)])&#xa;&#xa;                                      elif forge=='fy':&#xa;                                        saida[contlinha]=sp.array([ang,navio1.calcforcy()*(coeforpf/coefdes)])&#xa;&#xa;                                      elif forge=='k':&#xa;                                        saida[contlinha]=sp.array([ang,navio1.calck()*(coeforpm/(coefdes*dic['lpp']))])&#xa;&#xa;                                      elif forge=='n':&#xa;                                        saida[contlinha]=sp.array([ang,navio1.calcn()*(coeforpm/(coefdes*dic['lpp']))])&#xa;&#xa;                                      contlinha+=1&#xa;&#xa;                                    return saida&#xa;&#xa;                                  def plotcoefdertotab(self,formato='eps'):&#xa;                                    listf=['fx','fy','k','n']&#xa;                                    listcoef=['beta','gamma','epsilon','phi']&#xa;                                    dic=self.lerarqder()&#xa;                                    for f in listf:&#xa;                                      for coef in listcoef:&#xa;                                        temp=self.coefdertotab(dic,forge=f,intervalo=5,coef=coef,ConstAdOr='snae',ConstAdDes='dmi')&#xa;                                        plt.plot(temp[:,0],temp[:,1],'g^')&#xa;                                        plt.ylabel(f.capitalize())&#xa;                                        temp='$\$ '&#xa;                                        plt.xlabel(temp.replace('$ ',coef+'$'))&#xa;                                        if'f'in f:&#xa;                                          plt.title('Forca '+f.capitalize()+' Versus '+temp.replace('$ ',coef+'$'))&#xa;&#xa;                                        else:&#xa;                                          plt.title('Momento '+f.capitalize()+' Versus '+temp.replace('$ ',coef+'$'))&#xa;&#xa;                                        nomedoarq='./figuras/TabelaDmi/'+f+coef&#xa;                                        plt.savefig(nomedoarq,format=formato)&#xa;                                        plt.clf()" id="SVSIINVgUFVJ"/>
    <sourcecode value=":&#xa;leme.__init__(self)&#xa;self.dic=DicionarioDerivadas&#xa;self.vel=sp.zeros((6,1))&#xa;self.pos=sp.zeros((6,1))&#xa;" id="ZuNuMguN9bpD"/>
    <sourcecode value=":&#xa;Muda a velocidade do casco&#xa;self.vel=Velocidade.copy()&#xa;self.vel[0]=self.vel[0]-self.dic['unom']&#xa;" id="xV28YGm0HKOY"/>
    <sourcecode value=":&#xa;Forcas em surge&#xa;u=self.MostraVel()[0]&#xa;v=self.MostraVel()[1]&#xa;r=self.MostraVel()[5]&#xa;if Rot>=sp.array([0.]):&#xa;  d=self.dic['d1']&#xa;  e=self.dic['e1']&#xa;  f=self.dic['f1']&#xa;&#xa;elif Rot&lt;sp.array([0.]):&#xa;  d=self.dic['d0']&#xa;  e=self.dic['e0']&#xa;  f=self.dic['f0']&#xa;&#xa;ud=sp.sqrt(d*(u**2)+e*u*Rot*self.dic['dp']+f*(Rot*self.dic['dp'])**2)&#xa;X=((self.dic['rho']/2)*(self.dic['lpp']*ud)**2)*(self.dic['xdrdr']*self.MostraLeme()*(r**2)+self.dic['xdrdretaetaeta']*((self.MostraLeme()*r*Eta)**2))&#xa;return X&#xa;" id="0FHh5SajUXU1"/>
    <sourcecode value=":&#xa;Forcas de sway&#xa;u=self.MostraVel()[0]&#xa;v=self.MostraVel()[1]&#xa;r=self.MostraVel()[5]&#xa;if Rot>=sp.array([0.]):&#xa;  d=self.dic['d1']&#xa;  e=self.dic['e1']&#xa;  f=self.dic['f1']&#xa;&#xa;elif Rot&lt;sp.array([0.]):&#xa;  d=self.dic['d0']&#xa;  e=self.dic['e0']&#xa;  f=self.dic['f0']&#xa;&#xa;ud=sp.sqrt(d*(u**2)+e*u*Rot*self.dic['dp']+f*(Rot*self.dic['dp'])**2)&#xa;Y=(self.dic['rho']/2)*(self.dic['lpp']**2)*(self.dic['ydr']*(ud**2)*self.MostraLeme()*r)&#xa;return Y&#xa;" id="bfbdU1ig0UPU"/>
    <sourcecode value=":&#xa;Momento de roll&#xa;return sp.array([0.])&#xa;" id="JzKSgEJgZbqj"/>
    <sourcecode value=":&#xa;Momento de yaw&#xa;u=self.MostraVel()[0]&#xa;v=self.MostraVel()[1]&#xa;r=self.MostraVel()[5]&#xa;if Rot>=sp.array([0.]):&#xa;  d=self.dic['d1']&#xa;  e=self.dic['e1']&#xa;  f=self.dic['f1']&#xa;&#xa;elif Rot&lt;sp.array([0.]):&#xa;  d=self.dic['d0']&#xa;  e=self.dic['e0']&#xa;  f=self.dic['f0']&#xa;&#xa;ud=sp.sqrt(d*(u**2)+e*u*Rot*self.dic['dp']+f*(Rot*self.dic['dp'])**2)&#xa;N=(self.dic['rho']/2)*(self.dic['lpp']**3)*(self.dic['ndr']*(ud**2)*self.MostraLeme()*r)&#xa;return N" id="GJI5FuNoax4P"/>
    <sourcecode value=":&#xa;Construtor do leme&#xa;__________________________&#xa;Variáveis de entrada:&#xa;  DicionarioDerivadas(string)--Dicionário com os coeficientes do casco e outros dados&#xa;  ___________________________&#xa;  Obs:&#xa;    para o DicionarioDerivadas deve se utilizar a classe entrada e a função lerarqder&#xa;    leme.__init__(self)&#xa;    self.dic=DicionarioDerivadas&#xa;    self.vel=sp.zeros((6,1))&#xa;    self.pos=sp.zeros((6,1))&#xa;&#xa;  def MostraCoef(self,Chave):&#xa;    return self.dic[Chave]&#xa;&#xa;  def MudaVel(self,Velocidade):&#xa;    Muda a velocidade da embarcação&#xa;    __________________________&#xa;    Variáveis de entrada:&#xa;      Velocidade--array de velocidades&#xa;      vel=Velocidade.copy()&#xa;      self.V=sp.sqrt(vel[0]**2+vel[1]**2)&#xa;      vel[0]=vel[0]-self.dic['unom']&#xa;      vel[:3]=vel[:3]/self.V&#xa;      vel[3:]=vel[3:]*self.dic['lpp']/self.V&#xa;      self.vel=vel&#xa;&#xa;    def MudaPos(self,Posicao):&#xa;      Muda a posição e orientação do casco&#xa;      __________________________&#xa;      Variáveis de entrada:&#xa;        Posicao--Posição&#xa;        pos=Posicao.copy()&#xa;        pos[:3]=pos[:3]/self.dic['lpp']&#xa;        self.pos=pos&#xa;&#xa;      def Fx(self):&#xa;        Forcas em surge&#xa;        ua=self.vel[0]&#xa;        v=self.vel[1]&#xa;        p=self.vel[3]&#xa;        r=self.vel[5]&#xa;        X=self.dic['xd']*self.ang+self.dic['xdd']*self.ang**2+self.dic['xdu']*self.ang*ua+self.dic['xddu']*ua*self.ang**2+self.dic['xvd']*v*self.ang+self.dic['xvdd']*v*self.ang**2&#xa;        return X*((self.dic['rho']*(self.V*self.dic['lpp'])**2)/2)&#xa;&#xa;      def Fy(self):&#xa;        Forcas de sway&#xa;        ua=self.vel[0]&#xa;        v=self.vel[1]&#xa;        p=self.vel[3]&#xa;        r=self.vel[5]&#xa;        Y=self.dic['yd']*self.ang+self.dic['ydd']*self.ang**2+self.dic['yddd']*self.ang**3+self.dic['ydv']*self.ang*v+self.dic['ydvv']*self.ang*(v**2)+self.dic['ydu']*self.ang*ua+self.dic['yddu']*ua*(self.ang**2)+self.dic['ydddu']*ua*(self.ang**3)&#xa;        return Y*((self.dic['rho']*(self.V*self.dic['lpp'])**2)/2)&#xa;&#xa;      def K(self):&#xa;        Momento de roll&#xa;        ua=self.vel[0]&#xa;        v=self.vel[1]&#xa;        P=self.vel[3]&#xa;        r=self.vel[5]&#xa;        K=self.dic['kd']*self.ang+self.dic['kdd']*self.ang**2+self.dic['kddd']*self.ang**3+self.dic['kdv']*self.ang*v+self.dic['kdvv']*self.ang*v**2+self.dic['kdu']*self.ang*ua+self.dic['kddu']*ua*self.ang**2+self.dic['kdddu']*ua*self.ang**3&#xa;        return K*(self.dic['rho']*(self.V**2)*(self.dic['lpp']**3)/2)&#xa;&#xa;      def N(self):&#xa;        Momento de yaw&#xa;        ua=self.vel[0]&#xa;        v=self.vel[1]&#xa;        p=self.vel[3]&#xa;        r=self.vel[5]&#xa;        N=self.dic['nd']*self.ang+self.dic['ndd']*self.ang**2+self.dic['nddd']*self.ang**3+self.dic['ndv']*self.ang*v+self.dic['ndvv']*self.ang*v**2+self.dic['ndu']*self.ang*ua+self.dic['nddu']*ua*self.ang**2+self.dic['ndddu']*ua*self.ang**3&#xa;        return N*(self.dic['rho']*(self.V**2)*(self.dic['lpp']**3)/2)" id="k4A2ox7qxrQf"/>
    <sourcecode value=":&#xa;Construtor do leme&#xa;self.vel=sp.zeros((6,1))&#xa;self.pos=sp.zeros((6,1))&#xa;self.ang=sp.array(0.)&#xa;" id="eQDn1LGz0NRt"/>
    <sourcecode value=":&#xa;Mostra a velocidade&#xa;&quot;        ;return self.vel&#xa;" id="qa4rxVivgroB"/>
    <sourcecode value=":&#xa;Mostra o leme&#xa;return self.ang&#xa;" id="LTT0KH9uKywZ"/>
    <sourcecode value=":&#xa;Mostra a posição do casco&#xa;return self.pos&#xa;" id="L8Fd69CIf5lE"/>
    <sourcecode value=":&#xa;Muda o leme&#xa;self.ang=AngLeme.copy()&#xa;" id="9yXp3G3KdYPJ"/>
    <sourcecode value=":&#xa;Muda a velocidade do casco&#xa;self.vel=Velocidade.copy()&#xa;" id="XJwpqyyMmH3c"/>
    <sourcecode value=":&#xa;Muda a posição do casco&#xa;self.pos=Posicao.copy()&#xa;" id="EgPIZegEVS3I"/>
    <sourcecode value=":&#xa;Devolve força em surge&#xa;" id="MZTEFZU25UrV"/>
    <sourcecode value=":&#xa;Devolve força em sway&#xa;" id="AxOFRFi3FpUp"/>
    <sourcecode value=":&#xa;Devolve o momento de roll&#xa;" id="CnSPaxESIms5"/>
    <sourcecode value=":&#xa;Devolve o momento de yaw" id="uJWA3OEnIHsq"/>
    <sourcecode value=":&#xa;self.dic=DicionarioDerivadas&#xa;self.RotCom=sp.array([0.])&#xa;self.Rot=sp.array([30.])&#xa;self.vel=sp.zeros((6,1))&#xa;self.pos=sp.zeros((6,1))&#xa;" id="tSAIchnR23q6"/>
    <sourcecode value=":&#xa;return self.Rot&#xa;" id="cER4QHlzOCh9"/>
    <sourcecode value=":&#xa;return self.RotCom&#xa;" id="fz23AhA4nt8Q"/>
    <sourcecode value=":&#xa;Mostra a Velocidade do casco&#xa;return self.vel&#xa;" id="749uwHIOFd7E"/>
    <sourcecode value=":&#xa;Mostra a posição do casco&#xa;return self.pos&#xa;" id="pOI4zPG69aDH"/>
    <sourcecode value=":&#xa;Muda a velocidade do casco&#xa;self.vel=Velocidade.copy()&#xa;self.vel[0]=self.vel[0]-self.dic['unom']&#xa;" id="F8wOg7eNyo2G"/>
    <sourcecode value=":&#xa;Muda a posição do casco&#xa;pos=Posicao.copy()&#xa;self.pos=pos&#xa;" id="IbLiXRCu8UAe"/>
    <sourcecode value=":&#xa;self.RotCom=Rot.copy()&#xa;" id="8AjOQ9E4vnty"/>
    <sourcecode value=":&#xa;self.Rot=self.Rot+(self.MostraRotCom()-self.MostraRot())*(1-sp.exp(-self.dic['lambda']*t))&#xa;" id="Xllzsa7ncVnH"/>
    <sourcecode value=":&#xa;Devolve a força em surge&#xa;eta=self.MostraRotCom()/self.MostraRot()&#xa;u=self.MostraVel()[0]&#xa;v=self.MostraVel()[1]&#xa;if sp.array([-4000])&lt;eta and eta&lt;sp.array([-1.0]):&#xa;  a=self.dic['a1']&#xa;  b=self.dic['b1']&#xa;  c=self.dic['c1']&#xa;&#xa;elif sp.array([-1.0])&lt;=eta and eta&lt;sp.array([2.0]):&#xa;  a=self.dic['a2']&#xa;  b=self.dic['b2']&#xa;  c=self.dic['c2']&#xa;&#xa;elif sp.array([2.0])&lt;=eta and eta&lt;sp.array([100.0]):&#xa;  a=self.dic['a3']&#xa;  b=self.dic['b3']&#xa;  c=self.dic['c3']&#xa;&#xa;saida=(self.dic['rho']/2)*(self.dic['lpp']**2)*(self.dic['xvveta']*(v**2)*(eta-1))+(self.dic['rho']/2)*(self.dic['lpp']**2)*(u**2)*(a+b*eta+c*(eta**2))&#xa;return saida&#xa;" id="NzBwTTc4mwVK"/>
    <sourcecode value=":&#xa;Devolve a força em sway&#xa;eta=self.MostraRotCom()/self.MostraRot()&#xa;u=self.MostraVel()[0]&#xa;v=self.MostraVel()[1]&#xa;r=self.MostraVel()[5]&#xa;if self.MostraRot()>=sp.array([0.]):&#xa;  d=self.dic['d*1']&#xa;  e=self.dic['e*1']&#xa;  f=self.dic['f*1']&#xa;&#xa;elif self.MostraRot()&lt;sp.array([0.]):&#xa;  d=self.dic['d*0']&#xa;  e=self.dic['e*0']&#xa;  f=self.dic['f*0']&#xa;&#xa;uhp=sp.sqrt(d*(u**2)+e*u*self.MostraRot()*self.dic['dp']+f*(self.MostraRot()*self.dic['dp'])**2)&#xa;saida=(self.dic['rho']/2)*(self.dic['lpp']**3)*(self.dic['yreta']*(u*r)*(eta-1))+(self.dic['rho']/2)*(self.dic['lpp']**2)*(self.dic['yveta']*(u*v)*(eta-1))+(self.dic['rho']/2)*(self.dic['lpp']**2)*(self.dic['y*']*uhp)&#xa;return saida&#xa;" id="ENLzJqHpIfhR"/>
    <sourcecode value=":&#xa;Devolve o momento de roll&#xa;return sp.array([0.])&#xa;" id="F2yWhdxrLnb9"/>
    <sourcecode value=":&#xa;Devolve o momento de yaw&#xa;eta=self.MostraRotCom()/self.MostraRot()&#xa;u=self.MostraVel()[0]&#xa;v=self.MostraVel()[1]&#xa;r=self.MostraVel()[5]&#xa;if self.MostraRot()>=sp.array([0.]):&#xa;  d=self.dic['d*1']&#xa;  e=self.dic['e*1']&#xa;  f=self.dic['f*1']&#xa;&#xa;elif self.MostraRot()&lt;sp.array([0.]):&#xa;  d=self.dic['d*0']&#xa;  e=self.dic['e*0']&#xa;  f=self.dic['f*0']&#xa;&#xa;uhp=sp.sqrt(d*(u**2)+e*u*self.MostraRot()*self.dic['dp']+f*(self.MostraRot()*self.dic['dp'])**2)&#xa;saida=(self.dic['rho']/2)*(self.dic['lpp']**4)*(self.dic['nreta']*(u*r)*(eta-1))+(self.dic['rho']/2)*(self.dic['lpp']**3)*(self.dic['nveta']*(u*v)*(eta-1))+(self.dic['rho']/2)*(self.dic['lpp']**3)*(self.dic['n*']*uhp)&#xa;return saida" id="tXZEI8N7h6KO"/>
    <sourcecode value=":&#xa;Construtor do propulsor&#xa;self.vel=sp.zeros((6,1))&#xa;self.pos=sp.zeros((6,1))&#xa;self.ang=sp.array(0.)&#xa;" id="CNYP5ux7Emgl"/>
    <sourcecode value=":&#xa;Mostra a velocidade&#xa;&quot;        ;return self.vel&#xa;" id="WZGkLvUMZ5ht"/>
    <sourcecode value=":&#xa;Mostra o Rotação atual&#xa;return self.Rot&#xa;" id="ZhU6kAxrI3Ul"/>
    <sourcecode value=":&#xa;Mostra o Rotação Comandada&#xa;return self.RotCom&#xa;" id="YXTqavb2rVoE"/>
    <sourcecode value=":&#xa;Mostra a posição do casco&#xa;return self.pos&#xa;" id="b10QUof8nTKc"/>
    <sourcecode value=":&#xa;Muda o rotaçãoComandada&#xa;self.RotCom=Rot.copy()&#xa;" id="DWS0xla4k26L"/>
    <sourcecode value=":&#xa;Muda a velocidade do casco&#xa;self.vel=Velocidade.copy()&#xa;" id="kq3kvbgrZ4ax"/>
    <sourcecode value=":&#xa;Muda a posição do casco&#xa;self.pos=Posicao.copy()&#xa;" id="sylycxAAPbVp"/>
    <sourcecode value=":&#xa;Devolve força em surge&#xa;return sp.array([0.])&#xa;" id="TkCzsX7kGGzp"/>
    <sourcecode value=":&#xa;Devolve força em sway&#xa;return sp.array([0.])&#xa;" id="wqVA4SyU7A8D"/>
    <sourcecode value=":&#xa;Devolve o momento de roll&#xa;return sp.array([0.])&#xa;" id="2Hf8RlLBHxyA"/>
    <sourcecode value=":&#xa;Devolve o momento de yaw&#xa;return sp.array([0.])&#xa;" id="hvtysr8bhuup"/>
    <sourcecode value=":&#xa;pass&#xa;" id="dEFGgjQHMWga"/>
    <sourcecode value=":&#xa;Integrador runge-kutta&#xa;k1=function(t0,y0)&#xa;k2=function(t0+1./2*dt,y0+1./2*dt*k1)&#xa;k3=function(t0+1./2*dt,y0+1./2*dt*k2)&#xa;k4=function(t0+dt,y0+dt*k3)&#xa;y=y0+1./6*(k1+2.*k2+2.*k3+k4)*dt&#xa;return y&#xa;" id="Fd2a9gAbeKbs"/>
    <sourcecode value=":&#xa;Incremento=sp.mat(Incremento)&#xa;Posicaot=sp.mat(Posicaot)&#xa;return Posicaot+Incremento*Passo&#xa;" id="mM8t6rL1kNjk"/>
    <sourcecode value=":&#xa;Construtor do navio&#xa;__________________________&#xa;Variáveis de entrada:&#xa;  Nome(string)--Nome do Navio.Não possui relevância&#xa;&#xa;  Tipo('TP')--Tipo de modelo numérico adotado para a construção do Leme&#xa;  self.nome=Nome&#xa;  self.vel=sp.zeros((6,1))&#xa;  self.acel=sp.zeros((6,1))&#xa;  self.pos=sp.zeros((6,1))&#xa;  self.dic=DicionarioDerivadas&#xa;  self.tipo=Tipo&#xa;  self.integrador=inte()&#xa;  if Tipo=='TP':&#xa;    self.leme=lemeTris(DicionarioDerivadas)&#xa;    self.casco=cascoTris(DicionarioDerivadas)&#xa;    self.prop=prop()&#xa;&#xa;  elif Tipo=='MARAD':&#xa;    self.leme=lemeMarAd(DicionarioDerivadas)&#xa;    self.casco=cascoMarAd(DicionarioDerivadas)&#xa;    self.prop=propMarAd(DicionarioDerivadas)&#xa;&#xa;&#xa;def MostraVel(self):&#xa;  Mostra a Velocidade da embarcação&#xa;  return self.vel&#xa;&#xa;def MostraAcel(self):&#xa;  Mostra a aceleração da embarcação&#xa;  return self.acel&#xa;&#xa;def MostraLeme(self):&#xa;  Mostra o leme em rad da embarcação&#xa;  return self.leme.MostraLeme()&#xa;&#xa;def MostraPos(self):&#xa;  Mostra a posição da embarcação&#xa;  return self.pos&#xa;&#xa;def MostraRot(self):&#xa;  return self.prop.MostraRot()&#xa;&#xa;def MostraRotCom(self):&#xa;  return self.prop.MostraRotCom()&#xa;&#xa;def MudaLeme(self,AngLeme):&#xa;  Muda o leme da embarcação&#xa;  __________________________&#xa;  Variáveis de entrada:&#xa;    temp=AngLeme.copy()&#xa;    self.leme.MudaLeme(temp)&#xa;&#xa;  def MudaVel(self,Velocidade):&#xa;    Muda a velocidade da embarcação&#xa;    __________________________&#xa;    Variáveis de entrada:&#xa;      Velocidade--velocidade(m/s)&#xa;      temp=Velocidade.copy()&#xa;      self.vel=temp&#xa;      self.casco.MudaVel(temp)&#xa;      self.leme.MudaVel(temp)&#xa;&#xa;    def MudaPos(self,Posicao):&#xa;      Muda a posição da embarcação&#xa;      __________________________&#xa;      Variáveis de entrada:&#xa;        Posição--posição(m)&#xa;        temp=Posicao.copy()&#xa;        self.pos=temp&#xa;        self.casco.MudaPos(temp)&#xa;        self.leme.MudaPos(temp)&#xa;&#xa;      def MudaAcel(self,Aceleracao):&#xa;        Muda a aceleração(m/s2)&#xa;        _________________________&#xa;        Variáveis de entrada:&#xa;          Aceleração--aceleração(m/s2)&#xa;          temp=Aceleracao.copy()&#xa;          self.acel=temp&#xa;&#xa;        def MudaRotCom(self,Rot):&#xa;          self.prop.MudaRotCom(Rot)&#xa;&#xa;        def CalcFx(self):&#xa;          Calcula a força em Surge&#xa;          cori=self.dic['m']*((self.dic['rho']*(self.dic['lpp'])**3)/2)*(self.vel[1]*self.vel[5]+self.dic['xg']*(self.vel[5]**2)-self.dic['zg']*self.vel[3]*self.vel[5])&#xa;          if self.tipo=='TP':&#xa;            saida=self.casco.Fx()+self.leme.Fx()+self.prop.Fx()+cori&#xa;&#xa;          elif self.tipo=='MARAD':&#xa;            saida=self.prop.Fx()+self.casco.Fx(self.MostraRot())+self.leme.Fx(self.MostraRot(),self.MostraRotCom()/self.MostraRot())+cori&#xa;&#xa;          return saida&#xa;&#xa;        def CalcFy(self):&#xa;          Calcula a força em Sway&#xa;          cori=-self.dic['m']*((self.dic['rho']*(self.dic['lpp'])**3)/2)*self.vel[0]*self.vel[5]&#xa;          if self.tipo=='TP':&#xa;            saida=self.casco.Fy()+self.leme.Fy()+self.prop.Fy()+cori&#xa;&#xa;          elif self.tipo=='MARAD':&#xa;            saida=self.prop.Fx()+self.casco.Fy(self.MostraRot())+self.leme.Fy(self.MostraRot())+cori&#xa;&#xa;          return saida&#xa;&#xa;        def CalcK(self):&#xa;          Calcula o momento de Roll&#xa;          cori=self.dic['m']*((self.dic['rho']*(self.dic['lpp'])**3)/2)*self.dic['zg']*self.vel[0]*self.vel[5]&#xa;          if self.tipo=='TP':&#xa;            saida=self.casco.K()+self.leme.K()+self.prop.K()+cori&#xa;&#xa;          elif self.tipo=='MARAD':&#xa;            saida=self.casco.K(self.MostraRot())+self.leme.K(self.MostraRot())+self.prop.K()+cori&#xa;&#xa;          return saida&#xa;&#xa;        def CalcN(self):&#xa;          Calcula o momento de Yaw&#xa;          Yaw&#xa;          cori=-self.dic['m']*((self.dic['rho']*(self.dic['lpp'])**3)/2)*self.dic['xg']*self.vel[0]*self.vel[5]&#xa;          if self.tipo=='TP':&#xa;            saida=self.casco.N()+self.leme.N()+self.prop.N()+cori&#xa;&#xa;          elif self.tipo=='MARAD':&#xa;            saida=self.prop.Fx()+self.casco.N(self.MostraRot())+self.leme.N(self.MostraRot())+cori&#xa;&#xa;          return saida&#xa;&#xa;        def VetF(self,GrausDeLib=4):&#xa;          Vetor de forças&#xa;          _________________________&#xa;          Variáveis de entrada:&#xa;            GrausDeLib(integer)--Graus de liberdade&#xa;            temp=None&#xa;            if GrausDeLib==4:&#xa;              temp=sp.mat([self.CalcFx(),self.CalcFy(),self.CalcK(),self.CalcN()])&#xa;&#xa;            elif GrausDeLib==3:&#xa;              temp=sp.mat([self.CalcFx(),self.CalcFy(),self.CalcN()])&#xa;&#xa;            return temp&#xa;&#xa;          def H(self,GrausDeLib=4):&#xa;            Matriz de massa menos matriz de massa adicional&#xa;            _________________________&#xa;            Variáveis de entrada:&#xa;              GrausDeLib(integer)--Graus de liberdade&#xa;              H=None&#xa;              if GrausDeLib==4:&#xa;                H=self.casco.M(GrausDeLib)-self.casco.Ma(GrausDeLib)&#xa;&#xa;              elif GrausDeLib==3:&#xa;                H=self.casco.M(GrausDeLib)-self.casco.Ma(GrausDeLib)&#xa;&#xa;              return sp.mat(H)&#xa;&#xa;            def f(self,GrausDeLib=4):&#xa;              Calcula o valor de f(x)na equação&#xa;              x' = f(x);onde x são é o vetor de velocidades no sistema solidário&#xa;              _________________________&#xa;              Variáveis de entrada:&#xa;                GrausDeLib(integer)--Graus de liberdade&#xa;                if GrausDeLib==4:&#xa;                  a=sp.zeros((6,6))&#xa;                  a[5,5]=1.&#xa;                  a[4,4]=1.&#xa;                  a[:4,:4]=self.H(GrausDeLib)&#xa;                  b=sp.zeros((6,1))&#xa;                  b[4,0]=self.vel[3]&#xa;                  b[5,0]=self.vel[5]*sp.cos(self.pos[3])&#xa;                  b[:4,:]=self.VetF(GrausDeLib)&#xa;&#xa;                elif GrausDeLib==3:&#xa;                  a=sp.zeros((4,4))&#xa;                  a[3,3]=1&#xa;                  a[:3,:3]=self.H(GrausDeLib)&#xa;                  b=sp.zeros((4,1))&#xa;                  b[:3]=self.VetF(GrausDeLib)&#xa;                  b[3]=self.MostraVel()[5]&#xa;&#xa;                saida=linalg.solve(a,b)&#xa;                return saida&#xa;&#xa;              def facel(self,t,x,GrausDeLib=4):&#xa;                velocidade=self.MostraVel().copy()&#xa;                posicao=self.MostraPos().copy()&#xa;                if GrausDeLib==4:&#xa;                  x4=sp.zeros([6,1])&#xa;                  x4[0]=x[0]+self.dic['unom']&#xa;                  x4[1]=x[1]&#xa;                  x4[3]=x[2]&#xa;                  x4[5]=x[3]&#xa;                  self.MudaVel(x4)&#xa;                  posfutura=sp.zeros([6,1])&#xa;                  posfutura[3]=x[4]&#xa;                  posfutura[5]=x[5]&#xa;                  self.MudaPos(posfutura)&#xa;                  saida=self.f(GrausDeLib)&#xa;&#xa;                self.MudaVel(velocidade)&#xa;                self.MudaPos(posicao)&#xa;                return saida&#xa;&#xa;              def simula(self,met='euler',t0=0.,dt=0.5,t=100.,GrausDeLib=4,tipo='ziza10/10',Rot=sp.array([32])):&#xa;                Simulador de manobras padrão&#xa;                _________________________&#xa;                Variáveis de entrada:&#xa;                  GrausDeLib(integer)--Graus de liberdade&#xa;&#xa;                  met--Método de integração.Default-Euler&#xa;&#xa;                  t0--Tempo inicial&#xa;&#xa;                  dt--Passo no tempo&#xa;&#xa;                  t--Tempo final&#xa;                  tipo-tipo de manobra simulada.Zig-Zag10/10 e Curva_de_Giro_port ou Curva_de_Giro_starboard.Default-Zig-Zag&#xa;                  __________________________&#xa;                  Saída:&#xa;                    Tupla de sp.array&#xa;                    (veloHis,posHis,acelHis,fHis,veloInerHis,lemeHis)&#xa;                    Em cada elemento da tupla:&#xa;                      A primeira coluna é o passo de tempo e as demais são as variáveis&#xa;                      veloHis--histórico de velocidades&#xa;&#xa;                      posHis--histórico de posições&#xa;                      acelHis---histórico de acelerações&#xa;                      fHis--histórico de forças&#xa;                      veloInerHis--histórico de velocidades no sistema inercial&#xa;                      lemeHis--histórico do comando de leme&#xa;                      if tipo=='Curva_de_Giro_port':&#xa;                        self.MudaLeme(sp.array(35*sp.pi/180))&#xa;                        self.MudaPos(sp.array([[0.],[0.],[0.],[0.],[0.],[0.]]))&#xa;                        if self.tipo=='MARAD':&#xa;                          self.MudaRotCom(Rot)&#xa;                          self.MudaVel(sp.array([[self.dic['unom']],[0.5],[0.],[0.],[0.],[0.]]))&#xa;&#xa;                        elif self.tipo=='TP':&#xa;                          self.MudaVel(sp.array([[self.dic['unom']],[0.],[0.],[0.],[0.],[0.]]))&#xa;&#xa;&#xa;                      if tipo=='Curva_de_Giro_starboard':&#xa;                        self.MudaLeme(sp.array(-35*sp.pi/180))&#xa;                        self.MudaPos(sp.array([[0.],[0.],[0.],[0.],[0.],[0.]]))&#xa;                        if self.tipo=='MARAD':&#xa;                          self.MudaRotCom(Rot)&#xa;                          self.MudaVel(sp.array([[self.dic['unom']],[0.5],[0.],[0.],[0.],[0.]]))&#xa;&#xa;                        elif self.tipo=='TP':&#xa;                          self.MudaVel(sp.array([[self.dic['unom']],[0.],[0.],[0.],[0.],[0.]]))&#xa;&#xa;&#xa;                      if tipo=='ziza10/10':&#xa;                        self.MudaLeme(sp.array(10*sp.pi/180))&#xa;                        self.MudaPos(sp.array([[0.],[0.],[0.],[0.],[0.],[0.]]))&#xa;                        if self.tipo=='MARAD':&#xa;                          self.MudaRotCom(Rot)&#xa;                          self.MudaVel(sp.array([[self.dic['unom']],[0.5],[0.],[0.],[0.],[0.]]))&#xa;&#xa;                        elif self.tipo=='TP':&#xa;                          self.MudaVel(sp.array([[self.dic['unom']],[0.],[0.],[0.],[0.],[0.]]))&#xa;&#xa;                        exe=0&#xa;&#xa;                      nlin=len(sp.arange(t0,t,dt))&#xa;                      lemeHis=sp.zeros((nlin,2))&#xa;                      veloHis=sp.zeros((nlin,7))&#xa;                      veloInerHis=sp.zeros((nlin,4))&#xa;                      posHis=sp.zeros([nlin,7])&#xa;                      fHis=sp.zeros((nlin,5))&#xa;                      acelHis=sp.zeros((nlin,7))&#xa;                      RotMaq=sp.zeros((nlin,2))&#xa;                      del nlin&#xa;                      cont=0&#xa;                      for tp in sp.arange(t0,t,dt):&#xa;                        if self.tipo=='MARAD':&#xa;                          self.prop.MudaRot(tp)&#xa;&#xa;                        if tipo=='ziza10/10'and(((exe%2==0)and self.pos[5]&lt;=-(10*sp.pi/180))or(exe%2!=0 and self.pos[5]>=(10*sp.pi/180))):&#xa;                          self.MudaLeme(self.MostraLeme()*(-1))&#xa;                          exe+=1&#xa;&#xa;                        rot=sp.array([[sp.cos(self.pos[5])*sp.cos(self.pos[4]),&#xa;                        -sp.sin(self.pos[5])*sp.cos(self.pos[3])+sp.cos(self.pos[5])*sp.sin(self.pos[4])*sp.sin(self.pos[3]),&#xa;                        sp.sin(self.pos[5])*sp.sin(self.pos[3])+sp.cos(self.pos[5])*sp.cos(self.pos[3])*sp.sin(self.pos[4])],&#xa;                        [sp.sin(self.pos[5])*sp.cos(self.pos[4]),&#xa;                        sp.cos(self.pos[5])*sp.cos(self.pos[3])+sp.sin(self.pos[3])*sp.sin(self.pos[4])*sp.sin(self.pos[5]),&#xa;                        -sp.cos(self.pos[5])*sp.sin(self.pos[3])+sp.sin(self.pos[5])*sp.cos(self.pos[3])*sp.sin(self.pos[4])],&#xa;                        [-sp.sin(self.pos[4]),sp.cos(self.pos[4])*sp.sin(self.pos[3]),sp.cos(self.pos[4])*sp.cos(self.pos[3])]])&#xa;                        rot.shape=(3,3)&#xa;                        rot=sp.matrix(rot)&#xa;                        inc=rot*sp.matrix(self.vel[0:3].copy())&#xa;                        xt=self.MostraPos()[0:3].copy()&#xa;                        d=sp.hstack(inc)&#xa;                        veloInerHis[cont,1:]=d&#xa;                        veloInerHis[cont,0]=tp&#xa;                        lemeHis[cont,0]=tp&#xa;                        lemeHis[cont,1]=self.MostraLeme().copy()&#xa;                        temp=sp.hstack(self.MostraPos())&#xa;                        posHis[cont,:]=sp.hstack((tp,temp))&#xa;                        temp=sp.hstack(self.MostraVel())&#xa;                        veloHis[cont,:]=sp.hstack((tp,temp))&#xa;                        temp=sp.hstack(sp.array(self.VetF(GrausDeLib)))&#xa;                        if GrausDeLib==4:&#xa;                          fHis[cont,:GrausDeLib+1]=sp.hstack((tp,temp))&#xa;&#xa;                        elif GrausDeLib==3:&#xa;                          fHis[cont,:3]=sp.hstack((tp,temp[:2]))&#xa;                          fHis[cont,4]=temp[2]&#xa;&#xa;                        acelHis[cont,:]=sp.hstack((tp,sp.hstack(self.MostraAcel())))&#xa;                        if self.tipo=='MARAD':&#xa;                          RotMaq[cont,:]=sp.hstack((tp,self.MostraRot()))&#xa;&#xa;                        del temp&#xa;                        if GrausDeLib==4:&#xa;                          x=sp.zeros([6,1])&#xa;                          x[0]=self.MostraVel()[0]-self.dic['unom']&#xa;                          x[1]=self.MostraVel()[1]&#xa;                          x[2]=self.MostraVel()[3]&#xa;                          x[3]=self.MostraVel()[5]&#xa;                          x[4]=self.MostraPos()[3]&#xa;                          x[5]=self.MostraPos()[5]&#xa;&#xa;                        elif GrausDeLib==3:&#xa;                          x=sp.zeros([4,1])&#xa;                          x[0]=self.MostraVel()[0]-self.dic['unom']&#xa;                          x[1]=self.MostraVel()[1]&#xa;                          x[2]=self.MostraVel()[5]&#xa;                          x[3]=self.MostraPos()[5]&#xa;&#xa;                        if met=='euler':&#xa;                          x=self.integrador.euler(self.f(GrausDeLib),x,dt)&#xa;&#xa;                        elif met=='rk4':&#xa;                          x=self.integrador.rk4(self.facel,dt,tp,x)&#xa;&#xa;                        xin=sp.zeros([6,1])&#xa;                        if GrausDeLib==4:&#xa;                          xin[0]=x[0]+self.dic['unom']&#xa;                          xin[1]=x[1]&#xa;                          xin[3]=x[2]&#xa;                          xin[5]=x[3]&#xa;&#xa;                        elif GrausDeLib==3:&#xa;                          xin[0]=x[0]+self.dic['unom']&#xa;                          xin[1]=x[1]&#xa;                          xin[5]=x[2]&#xa;&#xa;                        self.MudaVel(xin)&#xa;                        del xin&#xa;                        posfutura=sp.zeros((6,1))&#xa;                        posfutura[:3]=self.integrador.euler(inc,xt,dt)&#xa;                        if GrausDeLib==4:&#xa;                          posfutura[3]=x[4]&#xa;                          posfutura[5]=x[5]&#xa;&#xa;                        elif GrausDeLib==3:&#xa;                          posfutura[5]=x[3]&#xa;&#xa;                        self.MudaPos(posfutura)&#xa;                        cont+=1&#xa;                        del posfutura&#xa;&#xa;                      return veloHis,posHis,acelHis,fHis,veloInerHis,lemeHis,RotMaq" id="Ta4hrIEbSARi"/>
   </codegenerator>
  </codegeneration>
 </XMI.extensions>
</XMI>
